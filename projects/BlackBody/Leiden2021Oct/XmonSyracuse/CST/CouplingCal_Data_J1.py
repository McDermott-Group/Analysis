from antennalib import AntennaCoupling
import matplotlib.pyplot as plt
import numpy as np

### parameters to be tuned
e_eff = 6 # limit (1, 6.5), the voltage can also be built in to have a larger range
C_eff = 75*1e-21   # Commonly used (50-100)
Jbias_offset = 1    # mDAC should be +-1 mDAC basically +-5 GHz
k = 1   # Coupling between radiator and receiver, this could be larger than one due to the
        # fact we can generate QPs locally at the recevier's test pad

k1 = 0.0   # coupling between on chip phonon mitigation
f_SIM = 0.9672
# f_SIM = 0.955
# f_SIM = 1
### parameteres tuned done

# JJ7 = [4.2*1e3, None, 0, 1000*150]   #[R, L, C, A]
JJ1 = [33*1e3, None, 0, 180*150]   #[R, L, C, A]
JQ1 = [17.1*1e3, None, 0, 360*150]
JQ2 = [16*6*1e3, None, 0, 360*150] #

fileJ1 = "xmon_full-chip_JJ1.txt"
fileQ1 = "xmon_full-chip_Q1.txt"
fileQ2 = "xmon_full-chip_Q2.txt"

J1 = AntennaCoupling()
J1.import_data(fileJ1, JJ1)
f = J1.Antenna["f"]
ecJ1 = J1.e_c_dB
eJ1 = J1.e_c
pgJ1 = J1.p_g
refJ1 = J1.ref

Q1 = AntennaCoupling()
Q1.import_data(fileQ1, JQ1)
f_Q1 = Q1.Antenna["f"]
eQ1 = Q1.e_c

Q2 = AntennaCoupling()
Q2.import_data(fileQ2, JQ2)
f_Q2 = Q2.Antenna["f"]
eQ2 = Q2.e_c

Q1_PSD = np.array([
 [0, 84.71], [10, 83.96], [20, 84.23], [30, 86.4], [40, 87.31], [50, 86.84],
 [60, 90.49], [70, 84.87], [80, 93.37], [90, 92.26], [100, 85.84], [105, 88.58],
 [110, 93.15], [115, 93.18], [120, 88.24], [125, 93.81], [130, 92.1],
 [135, 93.12], [140, 94.12], [145, 90.95], [150, 96.23], [155, 93.09],
 [160, 92.57], [165, 95.28], [170, 108.53], [175, 112.48], [180, 110.56],
 [185, 117.12], [190, 111.76], [195, 146.9], [200, 152.27], [205, 110.88],
 [210, 142.96], [215, 114.6], [220, 118.28], [225, 106.11], [230, 113.76],
 [235, 104.71], [240, 116.44], [245, 119.01], [250, 118.85], [255, 162.85],
 [260, 140.35], [265, 190.56], [270, 238.27], [275, 357.13], [280, 510.46],
 [285, 423.02], [290, 402.21], [295, 345.57], [300, 287.87], [305, 276.92],
 [310, 177.41], [315, 199.65], [320, 174.54], [325, 156.87], [330, 153.4],
 [335, 142.36], [340, 123.98], [345, 134.24], [350, 120.66], [355, 124.7],
 [360, 129.66], [365, 111.69], [370, 117.6], [375, 108.47], [380, 118.24],
 [385, 119.4], [390, 113.81], [395, 109.55], [400, 112.85], [405, 109.8],
 [410, 110.58], [415, 119.61], [420, 111.42], [425, 115.35], [430, 113.22],
 [435, 127.26], [440, 112.25], [445, 118.91], [450, 113.65], [455, 120.86],
 [460, 130.0], [465, 122.4], [470, 125.93], [475, 135.96], [480, 135.86],
 [485, 121.83], [490, 130.17], [495, 141.74], [500, 143.77], [505, 139.33],
 [510, 143.33], [515, 144.14], [520, 150.08], [525, 146.87], [530, 152.72],
 [535, 166.69], [540, 155.28], [545, 153.44], [550, 156.55], [555, 158.48],
 [560, 159.86], [565, 162.99], [570, 168.99], [575, 169.96], [580, 169.83],
 [585, 171.79], [590, 183.36], [595, 187.39], [600, 197.38], [605, 199.21],
 [610, 197.96], [615, 207.83], [620, 205.61], [625, 215.06], [630, 218.58],
 [635, 219.62], [640, 225.89], [645, 224.15], [650, 239.1], [655, 241.98],
 [660, 253.27], [665, 258.87], [670, 257.35], [675, 261.22], [680, 277.17],
 [685, 273.35], [690, 289.32], [695, 285.94]
])

Q2_PSD = np.array([
 [0, 110.14], [10, 111.85], [20, 114.09], [30, 116.76], [40, 107.05],
 [50, 112.69], [60, 114.63], [70, 113.18], [80, 110.73], [90, 113.29],
 [100, 106.33], [105, 112.73], [110, 114.87], [115, 115.11], [120, 113.82],
 [125, 115.83], [130, 113.27], [135, 110.61], [140, 110.82], [145, 112.3],
 [150, 105.65], [155, 110.66], [160, 120.91], [165, 118.6], [170, 116.23],
 [175, 126.43], [180, 138.17], [185, 136.92], [190, 147.68], [195, 163.44],
 [200, 214.61], [205, 173.59], [210, 156.82], [215, 133.33], [220, 134.52],
 [225, 142.49], [230, 144.59], [235, 144.45], [240, 161.03], [245, 204.56],
 [250, 179.55], [255, 309.64], [260, 295.1], [265, 501.01], [270, 393.5],
 [275, 565.38], [280, 532.7], [285, 513.77], [290, 451.8], [295, 350.72],
 [300, 236.03], [305, 273.98], [310, 238.62], [315, 216.72], [320, 162.86],
 [325, 175.22], [330, 167.24], [335, 180.08], [340, 138.75], [345, 143.73],
 [350, 147.73], [355, 128.8], [360, 135.02], [365, 138.06], [370, 138.39],
 [375, 137.08], [380, 146.5], [385, 148.45], [390, 135.55], [395, 141.06],
 [400, 136.88], [405, 122.28], [410, 143.14], [415, 145.49], [420, 145.11],
 [425, 142.84], [430, 144.94], [435, 143.89], [440, 143.24], [445, 153.76],
 [450, 139.38], [455, 144.28], [460, 142.56], [465, 168.05], [470, 152.87],
 [475, 144.32], [480, 173.07], [485, 159.34], [490, 169.97], [495, 172.93],
 [500, 168.11], [505, 159.56], [510, 167.22], [515, 157.83], [520, 168.37],
 [525, 170.62], [530, 167.11], [535, 167.57], [540, 171.61], [545, 179.19],
 [550, 175.36], [555, 192.33], [560, 178.93], [565, 195.94], [570, 195.77],
 [575, 201.38], [580, 211.95], [585, 217.29], [590, 220.68], [595, 225.57],
 [600, 235.64], [605, 232.36], [610, 247.02], [615, 252.35], [620, 251.32],
 [625, 256.81], [630, 277.58],[635, 271.4], [640, 276.76], [645, 290.74],
 [650, 300.61], [655, 297.27], [660, 304.96], [665, 314.33], [670, 322.21],
 [675, 332.47], [680,340.9], [685, 356.28], [690, 380.62], [695, 380.05]
])

Q2_PSD_HighDensity = np.array([
 [180, 140.06], [181, 134.05], [182, 145.11], [183, 141.86], [184, 140.6],
 [185, 136.93], [186, 140.99], [187, 143.37], [188,147.55], [189, 158.44],
 [190, 141.82], [191, 145.11], [192, 151.52], [193, 155.54], [194, 156.24],
 [195, 176.21], [196, 183.14], [197, 192.49], [198, 206.2], [199, 208.68],
 [200, 217.07], [201, 198.59], [202, 188.58], [203, 186.77], [204, 180.67],
 [205, 181.78], [206, 175.46], [207, 160.91], [208, 150.06], [209, 144.02],
 [210, 154.6], [211, 153.16], [212, 145.33], [213, 139.49], [214, 145.79],
 [215, 132.37], [216, 134.78], [217, 131.71], [218, 131.17], [219, 134.16],
 [220, 134.65],
 [240, 165.11], [241, 176.0], [242, 184.17], [243, 203.9], [244, 204.67],
 [245, 200.25], [246, 192.05], [247, 177.63], [248, 166.81], [249, 176.7],
 [250, 172.61], [251, 191.47], [252, 211.74], [252, 211.74], [253, 236.97],
 [254, 264.3], [255, 320.9], [256, 342.0], [257, 336.47], [258, 322.06],
 [259, 314.75], [260, 306.93], [261, 295.03], [262, 327.24], [263, 349.96],
 [264, 400.97], [265, 474.02], [266, 533.97], [267, 502.98], [268, 430.93],
 [269, 395.85], [270, 380.72], [271, 404.66], [272, 407.56], [273, 436.65],
 [274, 483.88], [275, 576.9], [276, 646.97], [277, 630.08], [278, 595.8],
 [279, 535.47], [280, 533.75], [281, 577.87], [282, 590.71], [283, 586.07],
 [284, 540.84], [285, 519.62], [286, 464.17], [287, 433.07], [288, 434.52],
 [289, 434.56], [290, 447.42], [291, 451.06], [292, 421.62], [293, 391.33],
 [294, 364.1], [295, 352.32], [296, 338.06], [297, 315.09], [298, 276.2],
 [299, 253.58], [300, 223.04], [301, 227.07], [302, 237.81], [303, 237.37],
 [304, 254.48], [305, 262.74], [306, 272.82], [307, 295.53], [308, 273.4],
 [309, 247.42], [310, 234.12], [311, 217.07], [312, 210.84], [313, 220.57],
 [314, 217.3], [315, 218.55], [316, 212.74], [317, 201.96], [318, 186.43],
 [319, 171.63], [320, 163.32], [321, 163.15], [322, 166.33], [323, 173.58],
 [324, 178.3], [325, 174.9], [326, 169.55], [327, 168.68], [328, 162.62],
 [329, 164.45], [330, 174.29], [331, 163.01], [332, 176.56], [333, 181.52],
 [334, 178.15], [335, 174.54], [336, 177.54], [337, 171.0], [338, 153.62],
 [339, 150.22], [340, 147.27],
 [470, 162.09], [471, 165.13], [472, 157.8], [473, 148.28], [474, 143.32],
 [475, 155.42], [476, 151.5], [477, 155.12], [478, 157.33], [479, 161.03],
 [480, 172.63], [481, 161.15], [482, 159.25], [483, 166.36], [484, 165.22],
 [485, 166.92], [486, 169.92], [487, 167.52], [488, 166.26], [489, 170.17],
 [490, 167.34], [491, 173.63], [492, 171.48],
 [493, 163.39], [494, 170.9], [495, 179.08], [496, 178.17], [497, 162.73],
 [498,164.27], [499, 158.5], [500, 161.7], [501, 165.84], [502, 174.24],
 [503, 162.13], [504, 172.12], [505, 166.31], [506, 157.85], [507, 177.26],
 [508, 167.48], [509, 171.55], [510, 165.69], [511, 171.26], [512, 172.12],
 [513, 163.69], [514, 165.17], [515, 156.97], [516, 162.13], [517, 165.13],
 [518, 158.48], [519, 162.01], [520, 164.37], [521, 163.57], [522, 164.79],
 [523, 170.34], [524, 171.86], [525, 158.99], [526, 164.72], [527, 164.18],
 [528, 165.68], [529, 166.0], [530, 164.15], [600, 230.26], [601, 244.0],
 [602, 238.54],
 [603, 241.26], [604, 241.88], [605, 245.13], [606, 247.22], [607, 240.49],
 [608, 240.77], [609, 247.71], [610, 251.74], [611, 243.74], [612, 240.79],
 [613, 260.59], [614, 250.74], [615, 253.42], [616, 257.27], [617, 252.83],
 [618, 260.04], [619, 259.36], [620, 258.24], [621, 254.16], [622, 253.6],
 [623, 258.51], [624, 259.94], [625, 252.21], [626, 266.65], [627, 252.68],
 [628, 275.0], [629, 266.95], [630, 265.23], [631, 270.14], [632, 267.44],
 [633, 273.53], [634, 275.34], [635, 268.99], [636, 270.72], [637, 279.83],
 [638, 276.1], [639, 275.65], [640, 270.95], [641, 276.35], [642, 274.69],
 [643, 285.97], [644, 289.83], [645, 284.37], [646, 290.31], [647, 282.61],
 [648, 292.51], [649, 283.97], [650, 297.54]
])

Q3_PSD = np.array([
 [0, 106.35], [10, 104.29], [20, 104.98], [30, 108.07], [40, 107.02],
 [50, 104.26], [60, 103.02], [70, 100.7], [80, 106.52], [90, 106.48],
 [100, 99.7], [105, 102.78], [110, 113.84], [115, 102.97], [120, 98.58],
 [125, 108.68], [130, 108.93],[135, 110.95], [140, 112.91], [145, 106.57],
 [150, 110.2], [155, 112.03], [160, 110.75], [165, 115.04], [170, 111.42],
 [175, 129.16], [180, 129.86], [185, 134.93], [190, 129.63], [195, 208.11],
 [200, 168.99], [205, 155.97], [210, 151.51], [215, 127.42], [220, 140.36],
 [225, 133.45], [230, 128.69], [235, 139.76], [240, 138.28], [245, 155.1],
 [250, 169.76], [255, 179.9], [260, 200.54], [265, 340.67], [270, 377.06],
 [275, 558.06], [280, 570.87], [285, 549.9], [290, 483.57], [295, 355.19],
 [300, 219.61], [305, 254.13], [310, 209.86], [315, 197.07], [320, 165.21],
 [325, 157.97], [330, 151.87], [335, 148.3], [340, 158.34], [345, 131.75],
 [350, 135.81], [355, 140.82], [360, 133.66], [365, 132.2], [370, 128.49],
 [375, 133.89], [380, 136.2], [385, 146.84], [390, 132.96], [395, 124.15],
 [400, 131.54], [405, 126.31], [410, 128.52], [415, 131.69], [420, 144.64],
 [425, 137.99], [430, 144.86], [435, 153.82], [440, 143.3], [445, 139.44],
 [450, 144.97], [455, 146.19], [460, 141.58], [465, 148.59], [470, 143.99],
 [475, 140.83], [480, 164.62], [485, 145.94], [490, 166.24], [495, 163.89],
 [500, 168.67], [505, 168.55], [510, 158.79], [515, 156.61], [520, 162.74],
 [525, 158.32], [530, 164.04], [535, 160.66], [540, 163.78], [545, 171.71],
 [550, 166.11], [555, 177.25], [560, 176.65], [565, 185.42], [570, 195.07],
 [575, 194.23], [580, 193.45], [585, 199.59], [590, 215.71], [595, 218.82],
 [600, 215.64], [605, 236.99], [610, 240.65], [615, 240.53], [620, 247.78],
 [625, 254.46], [630, 256.9], [635, 269.65], [640, 274.44], [645, 279.23],
 [650, 297.19], [655, 289.41], [660, 303.32], [665, 305.88], [670, 313.94],
 [675, 319.42], [680, 331.56], [685, 336.2], [690, 346.79], [695, 350.34]
])

Q3_PSD_HighDensity = np.array([
 [240, 135.0], [241, 135.34], [242, 143.32], [243, 150.62], [244, 151.47],
 [245, 146.06], [246, 145.57], [247, 151.73], [248,150.1], [249, 172.4],
 [250, 167.08], [251, 171.32], [252, 165.34], [253, 172.19], [254, 171.37],
 [255, 177.67], [256, 178.34], [257, 187.03], [258, 178.76], [259, 197.18],
 [260, 204.63], [261, 244.02], [262, 284.57], [263, 321.06], [264, 345.43],
 [265, 348.74], [266, 339.94], [267, 333.63], [268, 324.1], [269, 348.53],
 [270, 392.23], [271, 438.85], [272, 436.17], [273, 462.03], [274, 523.64],
 [275, 603.84], [276, 642.08], [277, 577.76], [278, 563.42], [279, 574.11],
 [280, 608.05], [281, 609.76], [282, 569.64], [283, 513.08], [284, 521.73],
 [285, 554.73], [286, 545.02], [287, 502.07], [288, 471.23], [289, 463.0],
 [290, 497.22], [291, 481.77], [292, 431.14], [293, 381.76], [294, 369.75],
 [295, 358.8], [296, 330.12], [297, 290.81], [298, 262.93], [299, 223.9],
 [300, 215.76], [301, 216.07], [302, 216.43], [303, 237.04], [304, 264.06],
 [305, 250.31], [306, 232.9], [307, 208.54], [308, 197.34], [309, 198.05],
 [310, 206.45], [311, 213.55], [312, 227.01], [313, 212.31], [314, 218.75],
 [315, 207.31], [316, 191.55], [317, 186.66], [318, 166.34], [319, 168.01]
])

f_scale = np.sqrt(e_eff/6.0)
# f_list = [f, f_Q1, f_Q2]
# for fi in f_list:
#     fi = fi/1e9
#     fi = fi*f_scale
f = f/1e9
f = f*f_scale
f_Q1 = f_Q1/1e9
f_Q1 = f_Q1*f_scale
f_Q2 = f_Q2/1e9
f_Q2 = f_Q2*f_scale

### dB power
# fig, axs = plt.subplots(4)
# axs[0].plot(f, ecJ1, color="black", marker="o")
# axs[0].set_ylabel("Radiator (dB)", color="black", fontsize=10)
# axs[0].set_xlim([50, 700])
# axs[0].set_ylim([-30, -10])

# axs[1].plot(f_Q1, ecQ1, color="green", marker="o")
# axs[1].set_ylabel("Receiver QB (dB)", color="green", fontsize=10)
# axs[1].set_xlim([50, 700])
# axs[1].set_ylim([-50, 0])
#
# axs[2].plot(f_Q1, ecQ1+ecJ1*k, color="red", marker="o")
# axs[2].set_ylabel("Sum (dB)", color="red", fontsize=10)
# axs[2].set_xlim([50, 700])
# axs[2].set_ylim([-70, -20])
#
# axs[3].plot(Q3_PSD[:, 0]*f_SIM, Q3_PSD[:, 1], color='k', label='Q3_PSD')
# axs[3].set_xlabel("Freq (GHz)", color="black", fontsize=10)
# axs[3].set_ylabel("PSD (Hz)", color="blue", fontsize=10)
# axs[3].set_yscale('log')
# axs[3].set_xlim([50, 700])
# axs[3].set_ylim([100, 1000])
#
# plt.grid()
# plt.show()

### Absolute photon rate
# fig, axs = plt.subplots(4)
# # plt.title('J1 Sim Bias')
# axs[0].plot(f, pgJ1, color="black", marker="o")
# axs[0].set_ylabel("Photons/Sec", color="black", fontsize=10)
# axs[0].set_xlim([50, 700])
# axs[0].set_ylim([1e6, 1e10])
# axs[0].set_yscale('log')
# axs[0].grid(True, which="both")
#
# axs[1].plot(f_Q1[100:], eQ1[100:], color="green", marker="o")
# axs[1].set_ylabel("Receiver QB Gamma", color="green", fontsize=10)
# axs[1].set_xlim([50, 700])
# axs[1].set_ylim([1e-5, 1e0])
# axs[1].set_yscale('log')
# axs[1].grid(True, which="both")
#
# pgJ1Q = []
# for i in range(len(pgJ1)):
#     pgJ1Q.append(pgJ1[i]*eQ1[i]*refJ1[i])
# # print(pgJ1Q)
# axs[2].plot(f_Q1[100:], pgJ1Q[100:], color="red", marker="o")
# axs[2].set_ylabel("Photons/Sec", color="red", fontsize=10)
# axs[2].set_xlim([50, 700])
# # axs[2].set_ylim([1e3, 1e8])
# axs[2].set_yscale('log')
# axs[2].grid(True, which="both")
#
# axs[3].plot(Q3_PSD[:, 0]*f_SIM, Q3_PSD[:, 1], color='k', label='Q3_PSD')
# axs[3].set_xlabel("Freq (GHz)", color="black", fontsize=10)
# axs[3].set_ylabel("PSD (Hz)", color="blue", fontsize=10)
# axs[3].set_yscale('log')
# axs[3].set_xlim([50, 700])
# axs[3].set_ylim([100, 1000])
# axs[3].grid(True, which="both")
#
# plt.show()

# Q2
# fig, axs = plt.subplots(4)
# axs[0].plot(f, pgJ1, color="black", marker="o")
# axs[0].set_ylabel("Photons/Sec", color="black", fontsize=10)
# axs[0].set_xlim([50, 700])
# axs[0].set_ylim([1e6, 1e10])
# axs[0].set_yscale('log')
# axs[0].grid(True, which="both")
#
# axs[1].plot(f_Q2[100:], eQ2[100:], color="green", marker="o")
# axs[1].set_ylabel("Q2 Receiver QB Gamma", color="green", fontsize=10)
# axs[1].set_xlim([50, 700])
# axs[1].set_ylim([1e-5, 1e0])
# axs[1].set_yscale('log')
# axs[1].grid(True, which="both")
#
# pgJ1Q2 = []
# for i in range(len(pgJ1)):
#     pgJ1Q2.append(pgJ1[i]*eQ2[i])
# # print(pgJ1Q)
# axs[2].plot(f_Q2[100:], pgJ1Q2[100:], color="red", marker="o")
# axs[2].set_ylabel("Photons/Sec", color="red", fontsize=10)
# axs[2].set_xlim([50, 700])
# # axs[2].set_ylim([1e3, 1e8])
# axs[2].set_yscale('log')
# axs[2].grid(True, which="both")
#
# axs[3].plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD[:, 1], color='k', label='Q2_PSD')
# axs[3].set_xlabel("Freq (GHz)", color="black", fontsize=10)
# axs[3].set_ylabel("PSD (Hz)", color="blue", fontsize=10)
# axs[3].set_yscale('log')
# axs[3].set_xlim([50, 700])
# axs[3].set_ylim([100, 1000])
# axs[3].grid(True, which="both")
#
# plt.show()

# Q2 # polished
fig, axs = plt.subplots(2)
pgJ1Q2 = []
l_i = 1
for i in range(len(pgJ1)):
    pgJ1Q2.append(pgJ1[i]*eQ2[i])
axs_02 = axs[0].twinx()

axs_02.plot(f[l_i:], eJ1[l_i:], color="red", marker="o", label='Radiator Efficiency')
axs_02.plot(f_Q2[l_i:], eQ2[l_i:], color="yellow", marker="o", label='Receiver Efficiency')
axs_02.set_ylabel('Coupling Efficiency', color="black", fontsize=10)
axs_02.set_yscale('log')
axs_02.set_ylim([1e-8, 1e-1])
axs_02.legend(loc=1)

axs[0].plot(f_Q2[l_i:], pgJ1Q2[l_i:], color="orange", marker="o", label='Photon Rate')
axs[0].set_ylabel("Photons/Sec", color="black", fontsize=10)
axs[0].set_xlim([50, 700])
axs[0].set_ylim([1e2, 1e9])
axs[0].set_yscale('log')
axs[0].grid(True, which="both")
axs[0].legend(loc=4)
axs[0].set_xlabel("Antenna Frequency (GHz)", color="black", fontsize=10)


pgJ1Q2_scaled = []
p2QP = 1e-3 # photon to QP conversion rate
base = 110
for i in range(len(pgJ1)):
    pgJ1Q2_scaled.append(pgJ1[i]*eQ2[i]*p2QP+base)

axs_12 = axs[1].twinx()
axs_12.plot(f_Q2[l_i:], pgJ1Q2_scaled[l_i:], color="orange", linestyle='--', label='Photon Rate Scaled')
axs_12.set_ylabel("Scaled Photons Rate (Hz)", color="black", fontsize=10)
axs_12.set_xlim([50, 700])
axs_12.set_ylim([100, 5000])
axs_12.set_yscale('log')
axs_12.legend(loc=1)

axs[1].plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD[:, 1], color='k', label='Q2 Measurement')
axs[1].set_xlabel("Radiator Josephson Frequency (GHz)", color="black", fontsize=10)
axs[1].set_ylabel("Parity Rate (Hz)", color="black", fontsize=10)
axs[1].set_yscale('log')
axs[1].set_xlim([50, 700])
axs[1].set_ylim([100, 5000])
axs[1].grid(True, which="both")
axs[1].legend(loc=4)

plt.show()

### Q2 matching with CST
# pgJ1Q2 = []
# p2QP = 1e-3 # photon to QP conversion rate
# base = 110
# for i in range(len(pgJ1)):
#     pgJ1Q2.append(pgJ1[i]*eQ2[i]*p2QP+base)
# # print(pgJ1Q)
# plt.plot(f_Q2[100:], pgJ1Q2[100:], color="red", marker="o", label='Photons generated scaled')
# plt.plot(Q2_PSD_HighDensity[:, 0]*f_SIM, Q2_PSD_HighDensity[:, 1], color='k', label='Q2_PSD')
# plt.plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD[:, 1], color='b', label='Q2_PSD')
# plt.xlabel("J6 Radiator Freq (GHz)", color="red", fontsize=10)
# plt.ylabel("Rate (Hz)", color="red", fontsize=10)
# plt.xlim([50, 700])
# # axs[2].set_ylim([1e3, 1e8])
# plt.yscale('log')
# plt.grid(True, which="both")
# plt.title('Q2 CST vs Meas')
# plt.legend()
# plt.show()