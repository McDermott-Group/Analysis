"""
P1 for Q123 at different J7 Bias
Data:
Z:\mcdermott-group\data\Antenna\SUXmon\Liu\VitoChip1\P12021Oct22_Q123WithJ7


"""
import noiselib
import matplotlib.pyplot as plt
import numpy as np

Q1 = np.array([
    [0.0, 0.17537, 0.02111], [0.0025, 0.17721, 0.02161], [0.005, 0.17672, 0.02198],
    [0.0075, 0.1753, 0.02159], [0.01, 0.17783, 0.02128], [0.0125, 0.17746, 0.02189],
    [0.015, 0.17612, 0.02284], [0.016, 0.17908, 0.02315], [0.017, 0.17804, 0.02412],
    [0.018, 0.17605, 0.02338], [0.019, 0.17621, 0.01921], [0.02, 0.17569, 0.01849],
    [0.021, 0.17472, 0.0171], [0.022, 0.177, 0.01961], [0.023, 0.176, 0.02226],
    [0.024, 0.17542, 0.02301], [0.025, 0.17955, 0.02207], [0.026, 0.17624, 0.02208],
    [0.027, 0.17745, 0.02195], [0.028, 0.17615, 0.01976], [0.029, 0.17825, 0.01918],
    [0.03, 0.17781, 0.02294], [0.031, 0.17728, 0.02166], [0.032, 0.17877, 0.02407],
    [0.033, 0.17659, 0.02165], [0.034, 0.17829, 0.02147], [0.035, 0.17717, 0.0193],
    [0.036, 0.17659, 0.01731], [0.037, 0.17836, 0.02185], [0.038, 0.17763, 0.02227],
    [0.039, 0.17729, 0.02056], [0.04, 0.17751, 0.02066], [0.041, 0.17793, 0.02063],
    [0.042, 0.1773, 0.0204], [0.043, 0.17603, 0.02045], [0.044, 0.17854, 0.02008],
    [0.045, 0.17768, 0.01827], [0.046, 0.17797, 0.02163], [0.047, 0.17381, 0.02004],
    [0.048, 0.17778, 0.02071], [0.049, 0.17788, 0.02139], [0.05, 0.17954, 0.02257],
    [0.051, 0.18086, 0.02183], [0.052, 0.18042, 0.02112], [0.053, 0.18077, 0.01959],
    [0.054, 0.17969, 0.02103], [0.055, 0.18171, 0.01915], [0.056, 0.18118, 0.0184],
    [0.057, 0.17915,0.01912], [0.058, 0.18452, 0.01811], [0.059, 0.18006, 0.02049],
    [0.06, 0.18117, 0.02068], [0.061, 0.18228, 0.01988], [0.062, 0.18198, 0.0197],
    [0.063, 0.18058, 0.02106], [0.064, 0.17994, 0.01901], [0.065, 0.18068, 0.02403],
    [0.066, 0.17814, 0.02107], [0.067, 0.17818, 0.02033], [0.068, 0.17614, 0.02103],
    [0.069, 0.17944, 0.01973], [0.07, 0.17758, 0.02082], [0.071, 0.17863, 0.0191],
    [0.072, 0.17988, 0.02144], [0.073, 0.17876, 0.02241], [0.074, 0.17777, 0.02249],
    [0.075, 0.17634, 0.02016], [0.076, 0.17655, 0.0204], [0.077, 0.17968, 0.02061],
    [0.078, 0.17983, 0.02273], [0.079, 0.17808, 0.02412], [0.08,0.17621, 0.02099],
    [0.081, 0.17692, 0.02051], [0.082, 0.1779, 0.02127], [0.083, 0.17681, 0.02393],
    [0.084, 0.17866, 0.02296], [0.085, 0.17593, 0.023], [0.086, 0.17848, 0.02057],
    [0.087, 0.17841, 0.02321], [0.088, 0.17756, 0.02052], [0.089, 0.17603, 0.01832],
    [0.09, 0.17596, 0.02103], [0.091, 0.17809, 0.02135], [0.092, 0.17857, 0.02163],
    [0.093, 0.1796, 0.02009], [0.094, 0.17907, 0.02126], [0.095, 0.17849, 0.01848],
    [0.096, 0.17671, 0.01862], [0.097, 0.1772, 0.01874], [0.098, 0.17741, 0.01905],
    [0.099, 0.17843, 0.02107], [0.1, 0.18122, 0.02448], [0.1025, 0.17858, 0.02154],
    [0.105, 0.17747, 0.02118],[0.1075, 0.18069, 0.02255], [0.11, 0.17865, 0.02287],
    [0.1125, 0.17941, 0.02127], [0.115, 0.17868, 0.01966], [0.1175, 0.18104, 0.02133],
    [0.12, 0.17749, 0.02018], [0.1225, 0.17977, 0.02267], [0.125, 0.17997, 0.02036],
    [0.1275, 0.17908, 0.0219], [0.13, 0.1798, 0.02352], [0.1325, 0.18045, 0.01854],
    [0.135, 0.18241, 0.02135], [0.1375, 0.17971, 0.0205], [0.14, 0.17995, 0.01916],
    [0.1425, 0.18162, 0.02243], [0.145, 0.18226, 0.02177], [0.1475, 0.18342, 0.02283]
])


Q2 = np.array([
    [0.0, 0.0449, 0.01054], [0.0025, 0.04557, 0.00908], [0.005, 0.04484, 0.0102],
    [0.0075,0.04562, 0.00885], [0.01, 0.04461, 0.01095], [0.0125, 0.04555, 0.01005],
    [0.015, 0.04497, 0.00887], [0.016, 0.04285, 0.0096], [0.017, 0.04538, 0.01054],
    [0.018, 0.04403, 0.00903], [0.019, 0.04438, 0.00957], [0.02, 0.04368, 0.0095],
    [0.021, 0.04365, 0.00871], [0.022, 0.04401, 0.00994], [0.023, 0.04393,0.00896],
    [0.024, 0.04407, 0.009], [0.025, 0.04465, 0.00821], [0.026, 0.04396, 0.009],
    [0.027, 0.04525, 0.00996], [0.028, 0.04378, 0.01004], [0.029, 0.04485, 0.01019],
    [0.03, 0.04497, 0.00864], [0.031, 0.04512, 0.00965], [0.032, 0.04641, 0.01109],
    [0.033, 0.04714, 0.01107], [0.034, 0.04617, 0.01064], [0.035, 0.04615, 0.01011],
    [0.036, 0.04773, 0.01001], [0.037, 0.04824, 0.00966], [0.038, 0.0468, 0.00952],
    [0.039, 0.04713, 0.0106], [0.04, 0.04537, 0.00912], [0.041, 0.04677, 0.01055],
    [0.042, 0.04519,0.00903], [0.043, 0.04657, 0.00947], [0.044, 0.04623, 0.00998],
    [0.045, 0.04724, 0.00932], [0.046, 0.04577, 0.00945], [0.047, 0.04892, 0.00996],
    [0.048, 0.04854, 0.00991], [0.049, 0.04758, 0.00876], [0.05, 0.05201, 0.00878],
    [0.051, 0.05436, 0.00923], [0.052, 0.05684, 0.00942], [0.053, 0.05137, 0.01002],
    [0.054, 0.05229, 0.01036], [0.055, 0.05548, 0.01019], [0.056, 0.0533, 0.00908],
    [0.057, 0.05318, 0.00908], [0.058, 0.05188, 0.00964], [0.059, 0.05081, 0.00947],
    [0.06, 0.05028, 0.0097], [0.061, 0.04739, 0.01049], [0.062, 0.04588, 0.01018],
    [0.063, 0.04562, 0.01071], [0.064, 0.04535, 0.01109], [0.065, 0.0461, 0.00894],
    [0.066, 0.04649, 0.01096], [0.067, 0.04635, 0.00976], [0.068, 0.04595, 0.01001],
    [0.069, 0.04662, 0.00937], [0.07, 0.04513, 0.00998], [0.071, 0.04454, 0.00924],
    [0.072, 0.04496, 0.01035], [0.073, 0.04473, 0.00973], [0.074, 0.04547, 0.01071],
    [0.075, 0.04447, 0.00894], [0.076, 0.04439, 0.00799], [0.077, 0.0453, 0.00963],
    [0.078, 0.04332, 0.00909], [0.079, 0.04373, 0.0095], [0.08, 0.04448, 0.00928],
    [0.081, 0.04405, 0.00736], [0.082, 0.04311, 0.00816], [0.083, 0.04298, 0.00886],
    [0.084, 0.04299, 0.00924], [0.085, 0.04337, 0.00879], [0.086, 0.04457, 0.0089],
    [0.087, 0.0435, 0.00795], [0.088, 0.0446, 0.00959], [0.089, 0.04383, 0.00957],
    [0.09, 0.04416, 0.00873], [0.091, 0.04474, 0.00909], [0.092, 0.04461, 0.00964],
    [0.093, 0.04384, 0.00858], [0.094, 0.04626, 0.00904], [0.095, 0.0448, 0.00887],
    [0.096, 0.04444, 0.00917], [0.097, 0.045, 0.00963], [0.098, 0.04464, 0.00918],
    [0.099, 0.0453, 0.00986], [0.1, 0.04467, 0.00979], [0.1025, 0.0443, 0.0099],
    [0.105, 0.04538, 0.0089], [0.1075, 0.04462, 0.0102], [0.11, 0.04528, 0.00881],
    [0.1125, 0.04602, 0.00996], [0.115, 0.04585, 0.00923],[0.1175, 0.04676, 0.009],
    [0.12, 0.04552, 0.01013], [0.1225, 0.04629, 0.00827], [0.125, 0.04735, 0.00977],
    [0.1275, 0.04717, 0.01093], [0.13, 0.04597, 0.00956], [0.1325, 0.04725, 0.00935],
    [0.135, 0.04682, 0.01058], [0.1375, 0.04806, 0.00979], [0.14, 0.04787, 0.01027],
    [0.1425, 0.04759, 0.00971], [0.145, 0.04902, 0.01008], [0.1475, 0.04917, 0.0096]
])

Q3 = np.array([
    [0.0, 0.06766, 0.01136], [0.0025, 0.06815, 0.01086], [0.005, 0.06925, 0.01064],
    [0.0075, 0.06718, 0.01074], [0.01, 0.06863, 0.00934], [0.0125, 0.06841, 0.01051],
    [0.015, 0.06753, 0.00985], [0.016, 0.06668, 0.00995], [0.017, 0.06669, 0.01042],
    [0.018, 0.06771, 0.01137], [0.019, 0.06784, 0.01058], [0.02, 0.06641, 0.00959],
    [0.021, 0.06758, 0.0104], [0.022, 0.0691, 0.00913], [0.023, 0.07038, 0.01112],
    [0.024, 0.06821, 0.0096], [0.025, 0.06789, 0.0115], [0.026, 0.06868, 0.00951],
    [0.027, 0.06879, 0.01041], [0.028, 0.06839, 0.01067], [0.029, 0.06949, 0.01023],
    [0.03, 0.06822, 0.01021], [0.031, 0.06921, 0.01036], [0.032, 0.07114, 0.0103],
    [0.033, 0.07028, 0.01067], [0.034, 0.07145, 0.00998], [0.035, 0.06994, 0.00983],
    [0.036, 0.07159, 0.01048], [0.037, 0.07102, 0.01135], [0.038, 0.07094, 0.01015],
    [0.039, 0.06854, 0.01108], [0.04, 0.07487, 0.01067], [0.041, 0.07083, 0.01089],
    [0.042, 0.07253, 0.01119], [0.043, 0.06953, 0.01051], [0.044, 0.06928, 0.01046],
    [0.045, 0.0714, 0.00988], [0.046, 0.07003, 0.01006], [0.047, 0.07066, 0.00945],
    [0.048, 0.06989, 0.00928], [0.049, 0.07192, 0.00975], [0.05, 0.07146, 0.0102],
    [0.051, 0.07283, 0.00992], [0.052, 0.07319, 0.00952], [0.053, 0.07159, 0.0098],
    [0.054, 0.07109, 0.00973], [0.055, 0.072, 0.00992], [0.056, 0.07164, 0.00984],
    [0.057, 0.07, 0.00942], [0.058, 0.07061, 0.00947], [0.059, 0.07058, 0.0103],
    [0.06, 0.06732, 0.00896], [0.061, 0.06893, 0.00941], [0.062, 0.06867, 0.01008],
    [0.063, 0.06871, 0.01002], [0.064, 0.06899, 0.01088], [0.065,0.06817, 0.0106],
    [0.066, 0.06975, 0.00994], [0.067, 0.06736, 0.00999], [0.068, 0.06893, 0.00994],
    [0.069, 0.06709, 0.00945], [0.07, 0.06744, 0.0112], [0.071, 0.06895, 0.00967],
    [0.072, 0.06804, 0.01047], [0.073, 0.06901, 0.00974], [0.074, 0.06812, 0.00954],
    [0.075, 0.0686, 0.00953], [0.076, 0.0682, 0.00939], [0.077, 0.06861, 0.01132],
    [0.078, 0.0689, 0.01052], [0.079, 0.06826, 0.01072], [0.08, 0.06683, 0.01096],
    [0.081, 0.06694, 0.01159], [0.082, 0.06778, 0.01142], [0.083, 0.06852, 0.01021],
    [0.084, 0.06849, 0.01142], [0.085, 0.06784, 0.01186], [0.086, 0.06694, 0.01265],
    [0.087, 0.06851, 0.01124],[0.088, 0.06945, 0.01146], [0.089, 0.06826, 0.01118],
    [0.09, 0.06773, 0.01078], [0.091, 0.06658, 0.01118], [0.092, 0.0683, 0.01176],
    [0.093, 0.06799, 0.01095], [0.094, 0.07003, 0.01074], [0.095, 0.06914, 0.01083],
    [0.096, 0.06899, 0.00945], [0.097, 0.0692, 0.01187], [0.098, 0.06787, 0.01195],
    [0.099, 0.06756, 0.01024], [0.1, 0.06703, 0.01144], [0.1025, 0.06811, 0.01049],
    [0.105, 0.06985, 0.01078], [0.1075, 0.06849, 0.01064], [0.11, 0.06879, 0.01093],
    [0.1125, 0.06797, 0.01082], [0.115, 0.06819, 0.01059], [0.1175, 0.06959, 0.0099],
    [0.12, 0.0682, 0.01022], [0.1225, 0.06802, 0.00953], [0.125, 0.06967,0.01026],
    [0.1275, 0.06998, 0.00996], [0.13, 0.06941, 0.00981], [0.1325, 0.06975, 0.01071],
    [0.135,0.07016, 0.01], [0.1375, 0.07021, 0.01056], [0.14, 0.0688, 0.00935],
    [0.1425, 0.07047, 0.01073], [0.145, 0.0716, 0.00918], [0.1475, 0.07067, 0.0104]
])
### J7 Bias Conversion
Q1[:, 0] = (Q1[:, 0])*1000
Q2[:, 0] = (Q2[:, 0])*1000
Q3[:, 0] = (Q3[:, 0])*1000


# f = 4.604
f = 1
Al_gap = 380e-6
DAC_Al = 1e5*Al_gap/0.952
plt.errorbar(Q1[:, 0]*f, Q1[:, 1], yerr=Q1[:, 2]/np.sqrt(100), color='b', label='Q1')
plt.errorbar(Q2[:, 0]*f, Q2[:, 1], yerr=Q2[:, 2]/np.sqrt(100), color='r', label='Q2')
plt.errorbar(Q3[:, 0]*f, Q3[:, 1], yerr=Q3[:, 2]/np.sqrt(100), color='y', label='Q3')

plt.axvline(x=DAC_Al * f, color='k', linestyle='--', linewidth=4, label='JJ Al Gap')

# plt.xlabel('Radiator Josephson Frequency (GHz)')
plt.xlabel('Radiator Josephson Bias (mDAC)')
plt.ylabel('P1')
plt.yscale('log')
plt.grid()
plt.legend(loc=1)
# plt.xlim([0, 1500])
# plt.ylim([10, 100000])
plt.show()



