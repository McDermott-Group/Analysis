from antennalib import AntennaCoupling, getNoiseBandwidth, getTbb, getPhotonRate
import matplotlib.pyplot as plt
import numpy as np
import copy

### parameters to be tuned
e_eff = 6 # limit (1, 6.5), the voltage can also be built in to have a larger range
C_eff = 100*1e-21   # Commonly used (50-100)
Jbias_offset = 0   # mDAC should be +-1 mDAC basically +-5 GHz
k = 1   # Coupling between radiator and receiver, this could be larger than one due to the
        # fact we can generate QPs locally at the recevier's test pad

k1 = 0.0   # coupling between on chip phonon mitigation
# f_SIM = 0.97
f_SIM = 0.968
### parameteres tuned done

JSFQ = [16*1e3, None, 0, 100*200, "Radiator"]   #[R, L, C, A]
JQ1 = [16.6*1e3, 18.3*1e-9, 0, 193.8*121.8, "Receiver"]   #
JQ2 = [13.2*1e3, 14.6*1e-9, 0, 350*126.6, "Receiver"]   #
JQ3 = [19*1e3, 21*1e-9, 0, 310*126, "Receiver"]   #    some issue with Q3
JQ4 = [15*1e3, 19.9*1e-9, 0, 184.4*122.5*2, "Receiver"]   #    some issue with Q3

# fileSFQ = "testpad_1.5THz.txt"
fileSFQ = "SFQ_1THz.txt"
# fileQ1 = "Q1.txt"
# fileQ1 = "Q1_with-leads_1.5THz.txt"
# fileQ2 = "Q2_1.5THz.txt"
# fileQ3 = "Q3_with-leads_1.5THz.txt"
# fileQ4 = "Q4_1.5THz.txt"

fileQ1 = "Q1_full-chip.txt"
fileQ2 = "Q2_full-chip.txt"
fileQ3 = "Q3_full-chip.txt"
fileQ4 = "Q4_full-chip.txt"

SFQ = AntennaCoupling()
SFQ.import_data(fileSFQ, JSFQ, C_eff=100*1e-21)
f_SFQ = SFQ.Antenna["f"]
ecSFQ = SFQ.Antenna["e_c_dB"]
eSFQ = SFQ.Antenna["e_c"]
pgSFQ = SFQ.Radiator["Gamma_rad"]
refSFQ = SFQ.Al_Wall["Ref"]
PhotonFlux = SFQ.Al_Wall["PhotonFlux"]

Q1 = AntennaCoupling()
Q1.import_data(fileQ1, JQ1, C_eff=C_eff)
# Z_ReQ1 = Q1.Antenna["Z_Re"]
f_Q1 = Q1.Antenna["f"]
eQ1 = Q1.Antenna["e_c"]
ecQ1 = Q1.Antenna["e_c_dB"]
AreaQ1 = Q1.Receiver["Area"]

Q2 = AntennaCoupling()
Q2.import_data(fileQ2, JQ2, C_eff=C_eff)
eQ2 = Q2.Antenna["e_c"]
ecQ2 = Q2.Antenna["e_c_dB"]
AreaQ2 = Q2.Receiver["Area"]

Q3 = AntennaCoupling()
Q3.import_data(fileQ3, JQ3, C_eff=C_eff)
eQ3 = Q3.Antenna["e_c"]
ecQ3 = Q3.Antenna["e_c_dB"]
AreaQ3 = Q3.Receiver["Area"]

Q4 = AntennaCoupling()
Q4.import_data(fileQ4, JQ4, C_eff=C_eff)
eQ4 = Q4.Antenna["e_c"]
ecQ4 = Q4.Antenna["e_c_dB"]
AreaQ4 = Q4.Receiver["Area"]


Q1_PSD = np.array([
    [0, 1009.34], [10, 958.58], [20, 1145.83], [30, 1046.75], [40, 1160.41],
    [50, 944.89], [60, 1210.19], [65, 1009.63], [70, 962.35], [75, 1140.02],
    [80, 1023.09], [85, 950.27], [90, 1115.45], [95, 1010.86], [100, 1010.15],
    [105, 941.78], [110, 1220.46], [115, 3437.57], [120, 4664.58], [125, 5172.3],
    [130, 4358.9], [135, 4078.99], [140, 3504.63], [145, 2565.52], [150, 2402.98],
    [155, 2252.7], [160, 2143.96], [165, 2867.33], [170, 2797.36], [175, 2298.0],
    [180, 2121.93], [185, 1866.51], [190, 2393.17], [195, 3000.95], [200, 3228.92],
    [205, 2731.99], [210, 4102.09], [215, 2740.09], [220, 2366.99], [225, 2074.19],
    [230, 2532.39], [235, 2125.4], [240, 1961.89], [245, 1994.41], [250, 1631.03],
    [255, 1733.2], [260, 1552.79], [265, 1505.57], [270, 1453.08], [275, 1596.24],
    [280, 1432.32], [285, 1493.91], [290,1538.86], [295, 1804.63], [300, 1614.51],
    [305, 1580.93], [310, 1528.13], [315, 1682.05], [320, 1507.64], [325, 1496.16],
    [330, 1612.51], [335, 1797.43], [340, 1642.42], [345, 1414.63], [350, 1333.24],
    [355, 1471.76], [360, 1455.64], [365, 1274.01], [370, 1213.63], [375, 1250.93],
    [380, 1262.28], [385, 1188.31], [390, 1350.99], [395, 1381.67], [400, 1434.28],
    [405, 1381.46], [410, 1514.37], [415, 1276.58], [420, 1198.76], [425, 1342.48],
    [430, 1600.78], [435, 1932.09], [440, 3354.68], [445, 2190.77], [450, 4330.97],
    [455, 4096.65], [455, 4096.65], [460, 4260.12], [465, 4579.53], [470, 5555.07],
    [475, 6303.84], [480, 5552.77], [485, 4612.55], [490, 5192.22], [495, 6452.49],
    [500, 6584.32], [505, 5684.13], [510, 5332.56], [515, 5229.72], [520, 5744.56],
    [525, 5112.43], [530, 6392.96], [535, 6664.02], [540, 5807.01], [545, 8712.34],
    [550, 5562.97], [555, 6059.17], [560, 5850.5], [565, 6664.39], [570, 7159.78],
    [575, 7547.52], [580, 7821.21]
])
Q2_PSD = np.array([
    [0, 12.86], [10, 11.36], [20, 13.26], [30, 12.21], [40, 12.7], [50, 12.83],
    [60, 12.84], [65, 11.72], [70, 12.77], [75, 13.46], [80,14.29], [85, 11.23],
    [90, 12.81], [95, 12.3], [100, 12.55], [105, 14.13], [110, 13.12], [115, 13.11],
    [120, 13.91], [125, 46.08], [130, 70.16], [135, 59.33], [140, 49.56], [145, 45.13],
    [150, 33.69], [155, 32.47], [160, 29.91], [165, 40.26], [170, 49.44], [175, 74.12],
    [180, 69.88], [185, 53.25], [190, 76.92], [195, 87.42], [200, 104.56], [205, 138.78],
    [210, 135.9], [215, 103.5], [220, 133.22], [225, 111.34], [230, 101.3], [235, 114.74],
    [240, 98.55], [245, 92.63], [250, 79.81], [255, 79.2], [260, 93.96], [265, 72.88],
    [270, 76.79], [275, 89.38], [280, 84.88], [285, 89.87], [290, 80.34], [295, 113.91],
    [300, 91.7], [305, 103.52], [310, 137.55], [315, 242.21], [320, 289.37], [325, 309.71],
    [330, 394.06], [335, 445.71], [340, 398.16], [345, 328.41], [350, 332.01], [355, 378.13],
    [360, 397.16], [365, 407.39], [370, 417.23], [375, 501.99], [380, 589.45], [385, 539.99],
    [390, 591.56], [395, 581.89], [400, 598.1], [405, 587.99], [410, 548.04], [415, 464.87],
    [420, 344.23], [425, 326.42], [430, 332.82], [435, 317.92], [440, 269.24],
    [445, 235.44], [450, 277.23], [455, 229.28], [455, 229.28], [460, 189.52],
    [465, 180.09], [470, 176.76], [475, 144.67], [480, 142.35], [485, 141.16],
    [490, 139.55], [495, 154.04], [500, 166.06], [505, 161.47], [510, 156.82],
    [515, 140.3], [520, 123.91], [525, 125.29], [530, 127.77], [535, 122.87],
    [540, 128.8], [545, 118.93], [550, 126.27], [555, 128.9], [560, 135.61],
    [565, 144.21], [570, 151.43], [575, 153.62], [580, 156.3]
])
Q4_PSD = np.array([
    [0, 201.33], [10, 191.95], [20, 185.84], [30, 184.72], [40, 190.91], [50, 192.32],
    [60, 191.89], [65, 199.26], [70, 185.41], [75, 186.42], [80, 191.55], [85, 187.11],
    [90, 196.13], [95, 192.59], [100, 183.86], [105, 195.27], [110, 173.7], [115, 197.69],
    [120, 230.62], [125, 303.48], [130, 325.11], [135, 437.51], [140, 443.43], [145, 591.88],
    [150, 542.91], [155, 349.66], [160, 333.63], [165, 492.91], [170, 650.01], [175, 874.25],
    [180, 789.24], [185, 743.13], [190, 1292.96], [195, 2104.6], [200, 2590.91],
    [205, 2378.21], [210, 3400.27], [215, 2979.89], [220, 2583.41], [225, 3639.7],
    [230, 2984.22], [235, 3062.72], [240, 2624.84], [245, 2456.55], [250, 2150.58],
    [255, 2201.17], [260, 2371.47], [265, 2309.56], [270, 2076.11], [275, 2427.54],
    [280, 2452.78], [285, 1863.37], [290, 1673.27], [295, 1555.0], [300, 1159.26],
    [305, 1230.32], [310, 1226.15], [315, 1300.76], [320, 1719.83], [325, 1759.15],
    [330, 1350.34], [335, 1180.01], [340, 1433.55], [345, 1233.66], [350, 1099.69],
    [355, 826.48], [360, 706.27], [365, 750.64], [370, 655.02], [375, 760.93],
    [380, 798.0], [385, 684.65], [390, 619.28], [395, 672.03], [400, 646.95],
    [405, 650.66], [410, 591.86], [415, 603.73], [420, 661.36], [425, 708.76],
    [430, 675.09], [435, 863.73], [440, 834.24], [445, 846.6], [450, 891.59],
    [455, 900.44], [455, 900.44], [460, 936.8], [465, 840.21], [470, 927.87],
    [475, 862.11], [480, 860.69], [485, 919.19], [490, 918.64], [495, 929.98],
    [500, 944.81], [505, 994.55], [510, 984.28], [515, 974.87], [520, 1126.25],
    [525, 1080.68], [530, 1000.69], [535, 1014.04], [540, 1088.76], [545, 1032.05],
    [550, 1028.85], [555, 1111.87], [560, 1200.51], [565, 1246.12], [570, 1264.38],
    [575, 1305.01], [580, 1357.58]
])


"""P1 data starts"""
Q1_P1 = np.array([
 [0.0, 0.09298, 0.06221], [0.01, 0.08916, 0.06128], [0.02, 0.089, 0.06147],
 [0.03, 0.0951, 0.06549], [0.04, 0.09745, 0.06667], [0.05, 0.09475, 0.06161],
 [0.06, 0.0965, 0.06219], [0.065, 0.09637, 0.06264], [0.07, 0.09611, 0.06043],
 [0.075, 0.09645, 0.06339], [0.08, 0.0962, 0.06132],[0.085, 0.10068, 0.0607],
 [0.09, 0.10184, 0.06135], [0.095, 0.10199, 0.06323], [0.1, 0.10112, 0.06051],
 [0.105, 0.10181, 0.07047], [0.11, 0.09557, 0.0649], [0.115, 0.07245, 0.04308],
 [0.12, 0.0907, 0.05883], [0.125, 0.19206, 0.11035], [0.13, 0.27543, 0.13324],
 [0.135, 0.20399, 0.12017], [0.14, 0.16725, 0.11487], [0.145, 0.15548, 0.0979],
 [0.15, 0.1486, 0.09949], [0.155, 0.13285, 0.0943], [0.16, 0.11884, 0.08277],
 [0.165, 0.12621, 0.0906], [0.17, 0.13444, 0.08744], [0.175, 0.12306, 0.08583],
 [0.18, 0.12553, 0.08762], [0.185, 0.12454, 0.08829], [0.19, 0.13114, 0.08514],
 [0.195, 0.1419, 0.0949], [0.2, 0.13267, 0.09133], [0.205, 0.1291, 0.09053],
 [0.21, 0.11608, 0.08056], [0.215, 0.11585, 0.08648], [0.22, 0.10969, 0.08522],
 [0.225, 0.11566, 0.08448], [0.23, 0.1099, 0.07986], [0.235, 0.11217, 0.08283],
 [0.24, 0.10243, 0.07312], [0.245, 0.10331, 0.07398], [0.25, 0.10328, 0.072],
 [0.255, 0.10345, 0.07371], [0.26, 0.10928, 0.07406], [0.265, 0.09451, 0.06824],
 [0.27, 0.09979, 0.07343], [0.275, 0.10407, 0.07574], [0.28, 0.1005, 0.07301],
 [0.285, 0.09788, 0.06739], [0.29, 0.0899, 0.06109], [0.295, 0.09192, 0.06906],
 [0.3, 0.08766, 0.06382], [0.305, 0.08578, 0.0618], [0.31, 0.0959, 0.06958],
 [0.315, 0.08493, 0.06151], [0.32, 0.09371, 0.06523], [0.325, 0.08817, 0.0621],
 [0.33, 0.08829, 0.06461], [0.335, 0.09426, 0.07002], [0.34, 0.09506, 0.06565],
 [0.345, 0.08806, 0.06468], [0.35, 0.0937, 0.06772], [0.355, 0.08938, 0.06586],
 [0.36, 0.0945, 0.0727], [0.365, 0.09514, 0.06746], [0.37, 0.0979, 0.06805],
 [0.375, 0.0964, 0.06637], [0.38, 0.09409, 0.07538], [0.385, 0.09168, 0.06589],
 [0.39, 0.08724, 0.06462], [0.395, 0.09255, 0.06626], [0.4, 0.09758, 0.0679],
 [0.405, 0.09731, 0.0622], [0.41, 0.09656, 0.06517], [0.415, 0.09782, 0.06514],
 [0.42, 0.09444, 0.0625], [0.425, 0.10517, 0.06881], [0.43, 0.10229, 0.06767],
 [0.435, 0.1004, 0.06595], [0.44, 0.09426, 0.0646], [0.445, 0.09276, 0.06256],
 [0.45, 0.0863, 0.05561], [0.455, 0.08479, 0.05052], [0.46, 0.08245, 0.05335],
 [0.465, 0.10599, 0.06799], [0.47, 0.14417, 0.08842], [0.475, 0.15364, 0.09103],
 [0.48, 0.1725, 0.09403], [0.485, 0.17679, 0.09697], [0.49, 0.17013, 0.09294],
 [0.495, 0.17889, 0.10419], [0.5, 0.17736, 0.10165], [0.505, 0.17979, 0.10251],
 [0.51, 0.18274, 0.10518], [0.515, 0.17863, 0.10299], [0.52, 0.17178, 0.09487],
 [0.525, 0.17893, 0.09914], [0.53, 0.16846, 0.08921], [0.535, 0.17653, 0.09469],
 [0.54, 0.16565, 0.09862], [0.545, 0.17751, 0.09732], [0.55, 0.18362, 0.0998],
 [0.555, 0.1793, 0.10203], [0.56, 0.17627, 0.08938], [0.565, 0.16496, 0.08652],
 [0.57, 0.16201, 0.08663], [0.575, 0.17549, 0.09596], [0.58, 0.17958, 0.09951],
 [0.585, 0.1905, 0.09638], [0.59, 0.1904, 0.10279],[0.595, 0.17613, 0.09692],
 [0.6, 0.16909, 0.0914], [0.605, 0.17696, 0.09085], [0.61, 0.20006, 0.11032],
 [0.615, 0.18573, 0.09801], [0.62, 0.19201, 0.10268], [0.625, 0.18925, 0.09691],
 [0.63, 0.19408, 0.09578], [0.635, 0.18161, 0.0992], [0.64, 0.18868, 0.09292],
 [0.645, 0.17565, 0.08776], [0.65,0.17677, 0.08944], [0.655, 0.17657, 0.09003],
 [0.66, 0.18628, 0.08907], [0.665, 0.17234, 0.08232], [0.67, 0.16224, 0.08078],
 [0.675, 0.17476, 0.09021], [0.68, 0.17505, 0.09241], [0.685, 0.17114, 0.08539],
 [0.69, 0.1723, 0.09369], [0.695, 0.1778, 0.09655], [0.7, 0.18837, 0.10392],
 [0.71, 0.17448,0.09406], [0.72, 0.17156, 0.09313], [0.73, 0.16765, 0.08805],
 [0.74, 0.16645, 0.08597], [0.75, 0.17467, 0.09399], [0.76, 0.16714, 0.09118],
 [0.77,0.16046, 0.09384], [0.78, 0.16706, 0.09331], [0.79, 0.16306, 0.09654],
 [0.8, 0.16743, 0.09415], [0.81, 0.16078, 0.08913], [0.82, 0.16411, 0.08895],
 [0.83, 0.15453, 0.08312], [0.84, 0.16027, 0.09016], [0.85, 0.16481, 0.08942],
 [0.86, 0.16492, 0.092], [0.87, 0.16835, 0.09381], [0.88, 0.15976, 0.08722],
 [0.89, 0.16352, 0.0869], [0.9, 0.16789, 0.09504], [0.91, 0.16699, 0.09282],
 [0.92, 0.16122, 0.09181], [0.93, 0.16425, 0.08857], [0.94, 0.16404, 0.08948],
 [0.95, 0.159, 0.07501], [0.96, 0.16116, 0.08516], [0.97, 0.15022, 0.07343],
 [0.98, 0.15407, 0.08419], [0.99, 0.15653, 0.09256], [1.0, 0.16064, 0.09155],
 [1.01, 0.16952, 0.09692], [1.02, 0.16976, 0.09753], [1.03, 0.15617, 0.07911],
 [1.04, 0.14594, 0.07679], [1.05, 0.15492, 0.07516], [1.06, 0.15392, 0.07775],
 [1.07, 0.15158, 0.08198], [1.08, 0.15301, 0.08193], [1.09, 0.15777, 0.08772],
 [1.1, 0.17054, 0.09452], [1.11, 0.15764, 0.09056], [1.12, 0.15891, 0.09492],
 [1.13, 0.169, 0.09631], [1.14, 0.16328, 0.09308], [1.15, 0.16054, 0.09198],
 [1.16, 0.16672, 0.0904], [1.17, 0.1723,0.09603], [1.18, 0.18728, 0.09479],
 [1.19, 0.17253, 0.09148]
])

Q2_P1 = np.array([
 [0.0, 0.07422, 0.03946], [0.01, 0.07915, 0.03969], [0.02, 0.07552, 0.03911],
 [0.03, 0.06982, 0.04172], [0.04, 0.07199, 0.03543], [0.05, 0.07436, 0.03463],
 [0.06, 0.06445, 0.0334], [0.065, 0.0695, 0.0344], [0.07, 0.07728, 0.04118],
 [0.075, 0.075, 0.04091], [0.08, 0.07691, 0.04465],[0.085, 0.07451, 0.04249],
 [0.09, 0.07543, 0.04307], [0.095, 0.0705, 0.04026], [0.1, 0.07911, 0.04146],
 [0.105, 0.0695, 0.03604], [0.11, 0.06813, 0.03891], [0.115, 0.0656, 0.03714],
 [0.12, 0.06875, 0.03444], [0.125, 0.06388, 0.03353], [0.13, 0.07198, 0.03497],
 [0.135, 0.06678, 0.03047], [0.14, 0.07122, 0.03298], [0.145, 0.0668, 0.02857],
 [0.15, 0.06972, 0.03273], [0.155, 0.07419, 0.03756], [0.16, 0.068, 0.03277],
 [0.165, 0.07321, 0.03712],[0.17, 0.06707, 0.0328], [0.175, 0.07096, 0.03593],
 [0.18, 0.06872, 0.02957], [0.185, 0.07056, 0.02935], [0.19, 0.07031, 0.03187],
 [0.195, 0.07159,0.02901], [0.2, 0.06951, 0.02968], [0.205, 0.07138, 0.0292],
 [0.21, 0.06643, 0.02671], [0.215, 0.07073, 0.02989], [0.22, 0.07096, 0.02838],
 [0.225,0.07382, 0.03209], [0.23, 0.07173, 0.03362], [0.235, 0.06989, 0.03025],
 [0.24, 0.06625, 0.0295], [0.245, 0.07009, 0.03232], [0.25, 0.07014, 0.03332],
 [0.255, 0.07469, 0.03122], [0.26, 0.07771, 0.03876], [0.265, 0.07717, 0.03656],
 [0.27, 0.07118, 0.03087], [0.275, 0.07097, 0.03564], [0.28, 0.07074, 0.02969],
 [0.285, 0.07257, 0.03804], [0.29, 0.06918, 0.0311], [0.295, 0.07149, 0.03123],
 [0.3, 0.07068, 0.02783], [0.305, 0.07091, 0.03325], [0.31, 0.07067, 0.03263],
 [0.315, 0.07363, 0.03336], [0.32, 0.0704, 0.02846], [0.325, 0.06999, 0.03046],
 [0.33, 0.06883, 0.0289], [0.335, 0.06777, 0.02502], [0.34, 0.06825, 0.02652],
 [0.345, 0.0648, 0.02367], [0.35, 0.07089, 0.03248], [0.355, 0.07014, 0.02873],
 [0.36, 0.07221, 0.02881], [0.365, 0.07094, 0.02651], [0.37, 0.07028, 0.02647],
 [0.375, 0.06748, 0.02458], [0.38, 0.07458, 0.02852], [0.385, 0.07163, 0.02529],
 [0.39, 0.06866, 0.02551], [0.395, 0.0726, 0.0293], [0.4, 0.06863, 0.02237],
 [0.405, 0.0726, 0.0299], [0.41, 0.07384, 0.02627], [0.415, 0.07235, 0.02837],
 [0.42, 0.07187, 0.0299], [0.425, 0.07172, 0.02828], [0.43, 0.07036, 0.03141],
 [0.435, 0.07015, 0.02705], [0.44, 0.06823, 0.02785], [0.445, 0.07093, 0.02813],
 [0.45, 0.06589, 0.02468], [0.455, 0.06726, 0.0272], [0.46, 0.06731, 0.02911],
 [0.465, 0.06761, 0.029], [0.47, 0.06754, 0.02976], [0.475, 0.06652, 0.02603],
 [0.48, 0.0696, 0.02905], [0.485, 0.06655, 0.02833], [0.49, 0.0703, 0.03172],
 [0.495, 0.0708, 0.03182], [0.5, 0.06675, 0.0309], [0.505, 0.0688, 0.03008],
 [0.51, 0.06856, 0.02898], [0.515, 0.06906, 0.03], [0.52, 0.06792, 0.03035],
 [0.525, 0.064, 0.02746], [0.53, 0.06811, 0.02676], [0.535, 0.06684, 0.02594],
 [0.54, 0.06686, 0.02671], [0.545, 0.06738, 0.02474], [0.55, 0.06858, 0.02797],
 [0.555, 0.06611, 0.02968], [0.56, 0.06639, 0.02857], [0.565,0.0673, 0.02995],
 [0.57, 0.06963, 0.03107], [0.575, 0.0674, 0.03053], [0.58, 0.07027, 0.03028],
 [0.585, 0.06751, 0.02688], [0.59, 0.06551, 0.02575], [0.595, 0.06757, 0.03258],
 [0.6, 0.06558, 0.02778], [0.605, 0.06861, 0.03233], [0.61, 0.0668, 0.02932],
 [0.615, 0.06831, 0.02899], [0.62, 0.06778,0.03004], [0.625, 0.06769, 0.02869],
 [0.63, 0.06659, 0.02678], [0.635, 0.06914, 0.02939], [0.64, 0.06719, 0.0259],
 [0.645, 0.06656, 0.02562], [0.65, 0.0642, 0.02523], [0.655, 0.06391, 0.02526],
 [0.66, 0.06733, 0.02883], [0.665, 0.06663, 0.02638], [0.67, 0.06571, 0.02504],
 [0.675, 0.06668, 0.02467], [0.68, 0.06309, 0.01884], [0.685, 0.0645, 0.02211],
 [0.69, 0.06479, 0.02327], [0.695, 0.0653, 0.02665], [0.7, 0.06564, 0.02891],
 [0.71, 0.06403, 0.02617], [0.72, 0.06343, 0.02898], [0.73, 0.06663, 0.02959],
 [0.74, 0.06424, 0.02438], [0.75, 0.06651, 0.02907], [0.76, 0.06718, 0.02832],
 [0.77,0.06702, 0.02903], [0.78, 0.06846, 0.02689], [0.79, 0.06912, 0.03125],
 [0.8, 0.07143, 0.03308], [0.81, 0.06812, 0.03073], [0.82, 0.0712, 0.03219],
 [0.83, 0.0703, 0.03105], [0.84, 0.06801, 0.02883], [0.85, 0.06805, 0.02609],
 [0.86, 0.06908, 0.02803], [0.87, 0.0706, 0.0286], [0.88, 0.07069, 0.02705],
 [0.89, 0.07085, 0.03143], [0.9, 0.0681, 0.02562], [0.91, 0.07118, 0.03119],
 [0.92, 0.06862, 0.02731], [0.93, 0.06976, 0.02815], [0.94, 0.07014,0.02598],
 [0.95, 0.07066, 0.02544], [0.96, 0.06957, 0.02447], [0.97, 0.07019, 0.02571],
 [0.98, 0.06969, 0.02311], [0.99, 0.07007, 0.02349], [1.0, 0.06779, 0.02647],
 [1.01, 0.07072, 0.02592], [1.02, 0.07305, 0.02941], [1.03, 0.06971, 0.02427],
 [1.04, 0.07357, 0.02828], [1.05, 0.07138, 0.02523], [1.06, 0.07375, 0.02678],
 [1.07, 0.07024, 0.02555], [1.08, 0.07306, 0.02806], [1.09, 0.07514, 0.02962],
 [1.1, 0.07718, 0.02722], [1.11, 0.07699, 0.03203], [1.12, 0.07406, 0.0293],
 [1.13, 0.07399, 0.02855], [1.14, 0.07493, 0.0297], [1.15, 0.07381, 0.02719],
 [1.16, 0.07406, 0.02851], [1.17, 0.07267, 0.02576], [1.18, 0.07262, 0.02594],
 [1.19, 0.07334, 0.03155]
])

Q2_P1_Weighted = np.array([
 [0.0, 0.07276, 0.04077], [0.01, 0.07838, 0.03986], [0.02, 0.07452, 0.04294],
 [0.03, 0.06869, 0.04296], [0.04, 0.07088, 0.03847], [0.05, 0.07213, 0.03637],
 [0.06, 0.06309, 0.03419], [0.065, 0.06789, 0.03771], [0.07, 0.07677, 0.04433],
 [0.075, 0.07419, 0.04359], [0.08, 0.07591, 0.04269], [0.085, 0.07423, 0.04432],
 [0.09, 0.07427, 0.04427], [0.095, 0.06907, 0.04376], [0.1, 0.07885, 0.04315],
 [0.105, 0.06798, 0.03496], [0.11, 0.06644, 0.03564], [0.115, 0.06166, 0.04104],
 [0.12, 0.06777, 0.03402], [0.125, 0.063, 0.0347], [0.13, 0.0707, 0.03768],
 [0.135, 0.06575, 0.03269], [0.14, 0.06995, 0.03542], [0.145, 0.06693, 0.03065],
 [0.15, 0.07002, 0.03606], [0.155, 0.07222, 0.04113], [0.16, 0.06721, 0.03526],
 [0.165, 0.07154, 0.03886], [0.17, 0.06804, 0.03477], [0.175, 0.07056, 0.03372],
 [0.18, 0.0707, 0.03462], [0.185, 0.0691, 0.03229], [0.19, 0.06938, 0.03347],
 [0.195, 0.07051, 0.03087], [0.2, 0.07011, 0.03195], [0.205, 0.07169, 0.03224],
 [0.21, 0.06656, 0.03013], [0.215, 0.07175, 0.0323], [0.22, 0.07232, 0.03242],
 [0.225, 0.07477, 0.03579], [0.23, 0.07098, 0.03736], [0.235, 0.06923, 0.03355],
 [0.24, 0.06938, 0.03352], [0.245, 0.06982, 0.03749], [0.25, 0.0699, 0.03717],
 [0.255, 0.07591, 0.03294], [0.26, 0.07715, 0.04293], [0.265, 0.07774, 0.03958],
 [0.27, 0.06912, 0.03298], [0.275, 0.06919, 0.03738], [0.28,0.07115, 0.03363],
 [0.285, 0.07183, 0.04006], [0.29, 0.06829, 0.03154], [0.295, 0.0714, 0.03396],
 [0.3, 0.07145, 0.03109], [0.305, 0.07264, 0.03653], [0.31, 0.06901, 0.0357],
 [0.315, 0.0723, 0.03645], [0.32, 0.0712, 0.03125], [0.325, 0.06957, 0.03147],
 [0.33, 0.07027, 0.0329], [0.335, 0.06843, 0.02799], [0.34, 0.069, 0.03025],
 [0.345, 0.06487, 0.0269], [0.35, 0.07062, 0.03434], [0.355, 0.06929, 0.03091],
 [0.36, 0.074, 0.03391], [0.365, 0.07227, 0.02881], [0.37, 0.07083, 0.03014],
 [0.375, 0.06664, 0.0282], [0.38, 0.07298, 0.0314], [0.385, 0.06973, 0.026],
 [0.39, 0.06973, 0.0283], [0.395, 0.07263, 0.03098], [0.4, 0.06728, 0.02475],
 [0.405, 0.07365, 0.03371], [0.41, 0.07427, 0.03007], [0.415, 0.07224, 0.03089],
 [0.42, 0.07095, 0.03273], [0.425, 0.07096, 0.03244], [0.43, 0.07123, 0.03222],
 [0.435, 0.07252, 0.03083], [0.44, 0.06719, 0.032], [0.445, 0.07096, 0.02989],
 [0.45, 0.06489, 0.02821], [0.455, 0.06609, 0.03059], [0.46, 0.06709, 0.03205],
 [0.465, 0.06595, 0.03132], [0.47, 0.07019, 0.03369], [0.475, 0.06879, 0.02982],
 [0.48, 0.07052, 0.03362], [0.485, 0.06782, 0.03048], [0.49, 0.06903, 0.03472],
 [0.495, 0.06923, 0.03533], [0.5, 0.06528, 0.0346], [0.505, 0.07005, 0.03106],
 [0.51, 0.06888, 0.03259], [0.515, 0.06964, 0.03193], [0.52, 0.06767, 0.03107],
 [0.525, 0.06371, 0.02971], [0.53, 0.06713, 0.02998], [0.535, 0.06775, 0.03023],
 [0.54, 0.06581, 0.02556], [0.545, 0.06497, 0.02648], [0.55, 0.06632, 0.02788],
 [0.555, 0.06513, 0.03224], [0.56, 0.06518, 0.02878], [0.565, 0.06636, 0.03266],
 [0.57, 0.06929, 0.03391], [0.575, 0.06821, 0.03246], [0.58, 0.07012, 0.03222],
 [0.585, 0.06548, 0.02743], [0.59, 0.06503, 0.02959], [0.595, 0.06652, 0.03591],
 [0.6, 0.06438, 0.03084], [0.605, 0.06711, 0.03598], [0.61, 0.06649, 0.0317],
 [0.615, 0.06785, 0.03048], [0.62, 0.06686, 0.0321], [0.625, 0.06529, 0.03236],
 [0.63, 0.06646, 0.03055], [0.635, 0.06928, 0.02967], [0.64, 0.06629, 0.02884],
 [0.645, 0.06661, 0.02818], [0.65, 0.06023, 0.02799], [0.655, 0.06299, 0.02702],
 [0.66, 0.06768, 0.02983], [0.665, 0.06429, 0.02958], [0.67, 0.06864, 0.02722],
 [0.675, 0.06617, 0.02491], [0.68, 0.06268, 0.02145], [0.685, 0.06117, 0.02568],
 [0.69, 0.06466, 0.0251], [0.695, 0.06631, 0.02825], [0.7, 0.06619, 0.0322],
 [0.71, 0.065, 0.02968], [0.72, 0.06308, 0.03212], [0.73, 0.06748, 0.03146],
 [0.74, 0.06471, 0.0275], [0.75, 0.06678, 0.03335], [0.76, 0.06887, 0.03117],
 [0.77, 0.06571, 0.02986], [0.78, 0.06792, 0.02751], [0.79, 0.06903, 0.0335],
 [0.8, 0.07184, 0.03488], [0.81, 0.06703, 0.03189], [0.82, 0.07067, 0.03341],
 [0.83, 0.06928, 0.03277], [0.84, 0.06911, 0.02913], [0.85, 0.06762, 0.03012],
 [0.86, 0.06942, 0.03167], [0.87, 0.07207, 0.03091], [0.88, 0.06698, 0.02657],
 [0.89, 0.07244, 0.03543], [0.9, 0.06629, 0.02732], [0.91, 0.07074, 0.03431],
 [0.92, 0.06978, 0.02902], [0.93, 0.06891, 0.03376], [0.94, 0.06977, 0.029],
 [0.95, 0.06915, 0.02756], [0.96, 0.06933, 0.0274], [0.97, 0.06718, 0.02977],
 [0.98, 0.07201, 0.0264], [0.99, 0.07124, 0.02851], [1.0, 0.06839, 0.02811],
 [1.01, 0.06964, 0.02482], [1.02, 0.07456, 0.03069], [1.03, 0.0712, 0.02866],
 [1.04, 0.07342, 0.02903], [1.05, 0.07109, 0.02758], [1.06, 0.07145, 0.02923],
 [1.07, 0.07086, 0.02893], [1.08, 0.07431, 0.02921], [1.09, 0.0753, 0.02995],
 [1.1, 0.07612, 0.02902], [1.11, 0.07684, 0.03246], [1.12, 0.07566, 0.03412],
 [1.13, 0.07419, 0.03072], [1.14, 0.07425, 0.02972], [1.15, 0.07218, 0.02988],
 [1.16, 0.07516, 0.02852], [1.17, 0.07215, 0.02882], [1.18, 0.07074, 0.02617],
 [1.19, 0.07215, 0.03664]
])

Q4_P1 = np.array([
 [0.0, 0.05239, 0.00756], [0.01, 0.0539, 0.00995], [0.02, 0.05282, 0.008],
 [0.03, 0.05198, 0.00927], [0.04, 0.05126, 0.0085], [0.05, 0.05187, 0.0075],
 [0.06, 0.05215, 0.0091], [0.065, 0.05166, 0.00918], [0.07, 0.05272, 0.00837],
 [0.075, 0.05315, 0.00847], [0.08, 0.05249, 0.00682], [0.085, 0.05093, 0.00815],
 [0.09, 0.05165, 0.00918], [0.095, 0.05118, 0.00856], [0.1, 0.05165, 0.00707],
 [0.105, 0.05295, 0.00809], [0.11, 0.05189, 0.00848], [0.115, 0.05224, 0.00892],
 [0.12, 0.05253, 0.0084], [0.125, 0.05211, 0.00828], [0.13, 0.05266, 0.00919],
 [0.135, 0.05258, 0.00864], [0.14,0.05407, 0.00974], [0.145, 0.05213, 0.00846],
 [0.15, 0.05479, 0.00808], [0.155, 0.05358, 0.00815], [0.16, 0.05344, 0.0086],
 [0.165, 0.05567, 0.00847], [0.17, 0.05433, 0.00811], [0.175, 0.054, 0.00827],
 [0.18, 0.05481, 0.00892], [0.185, 0.05624, 0.00805], [0.19, 0.05687, 0.00912],
 [0.195, 0.0587, 0.00867], [0.2, 0.06361, 0.0101], [0.205, 0.06706, 0.01041],
 [0.21, 0.05825, 0.00998], [0.215, 0.06203, 0.00764], [0.22, 0.06624, 0.00943],
 [0.225, 0.06618, 0.00842], [0.23, 0.06889, 0.01019], [0.235, 0.06702, 0.00814],
 [0.24, 0.06415, 0.01094], [0.245, 0.06339, 0.0092], [0.25, 0.06004, 0.0098],
 [0.255, 0.06352, 0.00945], [0.26, 0.06327, 0.00984], [0.265, 0.06333, 0.0075],
 [0.27, 0.06134, 0.00897], [0.275, 0.06217, 0.00921], [0.28, 0.06388, 0.00859],
 [0.285, 0.06226, 0.00952], [0.29, 0.05765, 0.00839], [0.295, 0.0564, 0.00936],
 [0.3, 0.05432, 0.00865], [0.305, 0.05681, 0.01027], [0.31, 0.05875, 0.00988],
 [0.315, 0.05799, 0.00938], [0.32, 0.05624, 0.00926], [0.325, 0.05912, 0.00813],
 [0.33, 0.05868, 0.00914], [0.335, 0.05932, 0.00923], [0.34, 0.05731, 0.0091],
 [0.345, 0.05715, 0.00827], [0.35, 0.05761, 0.01061], [0.355, 0.05698, 0.00825],
 [0.36, 0.05586, 0.00782], [0.365, 0.05689, 0.00871], [0.37, 0.0545, 0.00672],
 [0.375, 0.05439, 0.00832], [0.38, 0.05407, 0.00767], [0.385, 0.05505, 0.00931],
 [0.39, 0.05583, 0.00714], [0.395, 0.05411, 0.00718], [0.4, 0.05376, 0.00934],
 [0.405, 0.05447, 0.00669], [0.41, 0.05313, 0.00765], [0.415, 0.05263, 0.00855],
 [0.42, 0.05427, 0.00742], [0.425, 0.05316, 0.00844], [0.43, 0.05577, 0.01037],
 [0.435, 0.05468, 0.0073], [0.44, 0.05458, 0.00818], [0.445, 0.0541, 0.00824],
 [0.45, 0.05647, 0.00734], [0.455, 0.05467, 0.00799], [0.46, 0.05592, 0.00885],
 [0.465, 0.05577, 0.00664], [0.47, 0.05751, 0.00903], [0.475, 0.05622, 0.00886],
 [0.48, 0.05692, 0.0072], [0.485, 0.05729, 0.00869], [0.49, 0.05537, 0.00906],
 [0.495, 0.05733, 0.00828], [0.5, 0.05743, 0.00829], [0.505, 0.05552, 0.00808],
 [0.51, 0.06038, 0.00857], [0.515, 0.05758, 0.00938], [0.52, 0.05838, 0.00869],
 [0.525, 0.0575, 0.00824], [0.53, 0.05864, 0.00939], [0.535, 0.05941, 0.00912],
 [0.54, 0.05664, 0.00863], [0.545, 0.05936, 0.00923], [0.55, 0.05935, 0.00968],
 [0.555, 0.06168, 0.01071], [0.56, 0.05838, 0.0086], [0.565, 0.06061, 0.00977],
 [0.57, 0.0592, 0.01007], [0.575, 0.05894, 0.00771], [0.58, 0.06027, 0.0075],
 [0.585, 0.05949, 0.00884], [0.59, 0.06051, 0.00707], [0.595, 0.06108, 0.0081],
 [0.6, 0.06404, 0.0097], [0.605, 0.06155, 0.00966], [0.61, 0.06216, 0.00763],
 [0.615, 0.06255, 0.00909], [0.62, 0.06537, 0.00802], [0.625, 0.06458, 0.0088],
 [0.63, 0.06606, 0.00951], [0.635, 0.06799, 0.00952], [0.64, 0.06863, 0.00889],
 [0.645, 0.0678, 0.00912], [0.65, 0.06792, 0.00809], [0.655, 0.0719, 0.01007],
 [0.66, 0.07306, 0.00982], [0.665, 0.07565, 0.0111], [0.67, 0.07386, 0.00925],
 [0.675, 0.07859, 0.00941], [0.68, 0.07495, 0.01024], [0.685, 0.07898, 0.01174],
 [0.69, 0.08043, 0.01008], [0.695, 0.08332, 0.00886], [0.7, 0.08135, 0.01115],
 [0.71, 0.08396, 0.0114], [0.72, 0.08694, 0.01021], [0.73, 0.09138, 0.00999],
 [0.74, 0.09463, 0.01295], [0.75, 0.09646, 0.01015], [0.76, 0.0983, 0.01178],
 [0.77, 0.10248, 0.0111], [0.78, 0.10153, 0.01168], [0.79, 0.105, 0.01205],
 [0.8, 0.10685, 0.0119], [0.81, 0.10786, 0.01211], [0.82, 0.11315, 0.01374],
 [0.83, 0.11787, 0.01166], [0.84, 0.11732, 0.01143], [0.85, 0.11979, 0.01164],
 [0.86, 0.12126, 0.01431], [0.87, 0.12052, 0.01283], [0.88, 0.11818, 0.01185],
 [0.89, 0.11714, 0.01395], [0.9, 0.12217, 0.01214], [0.91, 0.12087, 0.01551],
 [0.92, 0.12235, 0.01019], [0.93, 0.11889, 0.01162], [0.94, 0.11954, 0.01071],
 [0.95, 0.12141, 0.01226], [0.96, 0.12107, 0.013], [0.97, 0.12039, 0.01217],
 [0.98, 0.12037, 0.01236], [0.99, 0.12122, 0.01171],[1.0, 0.1207, 0.01006],
 [1.01, 0.1216, 0.01158], [1.02, 0.12159, 0.01261], [1.03, 0.11931, 0.0133],
 [1.04, 0.12138, 0.01518], [1.05, 0.11874, 0.01326], [1.06, 0.12146, 0.0113],
 [1.07, 0.11729, 0.0149], [1.08, 0.11995, 0.01254], [1.09, 0.11812, 0.01381],
 [1.1, 0.12082, 0.01337], [1.11, 0.11748,0.01518], [1.12, 0.11856, 0.01413],
 [1.13, 0.11642, 0.01319], [1.14, 0.11917, 0.01437], [1.15, 0.11916, 0.01276],
 [1.16, 0.11867, 0.0156], [1.17, 0.11901, 0.01286], [1.18, 0.11652, 0.01387],
 [1.19, 0.11939, 0.01308]
])

Q1_P1[:, 0] = (Q1_P1[:, 0]) * 1000
Q2_P1[:, 0] = (Q2_P1[:, 0]) * 1000
Q4_P1[:, 0] = (Q4_P1[:, 0]) * 1000
"""P1 data ends"""

f_scale = np.sqrt(e_eff/6.0)
f_SFQ = f_SFQ/1e9
f_SFQ = f_SFQ*f_scale
f_Q1 = f_Q1/1e9
f_Q1 = f_Q1*f_scale

### two vertical plots
# fig, axs = plt.subplots(4)
# axs[0].plot(f_SFQ, ecSFQ, color="red", marker="o")
# axs[0].set_ylabel("Radiator (dB)",color="black", fontsize=10)
# axs[0].set_xlim([50, 600])
# axs[0].set_ylim([-60, 0])
# axs[0].grid()
#
# axs[1].plot(f_Q1, ecQ1, color="blue", marker="o", label='Q1')
# axs[1].plot(f_Q1, ecQ2, color="red", marker="o", label='Q2')
# axs[1].plot(f_Q1, ecQ4, color="green", marker="o", label='Q4')
# axs[1].set_ylabel("Receiver QB (dB)",color="black", fontsize=10)
# axs[1].set_xlim([50, 600])
# axs[1].grid()
# axs[1].legend()
# axs[1].set_ylim([-40, -10])
#
# axs[2].plot(f_Q1, ecQ1+ecSFQ*k, color="blue", marker="o", label='Q1')
# axs[2].plot(f_Q1, ecQ2+ecSFQ*k, color="red", marker="o", label='Q2')
# axs[2].plot(f_Q1, ecQ4+ecSFQ*k, color="green", marker="o", label='Q4')
# axs[2].set_ylabel("Receiver QB (dB)", color="black", fontsize=10)
# axs[2].set_xlim([50, 600])
# axs[2].grid()
# axs[2].legend()
# axs[2].set_ylim([-60, -20])
#
#
# axs[3].plot(Q1_PSD[:, 0]*f_SIM, Q1_PSD[:, 1], color='b', label='Q1_PSD')
# axs[3].plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD[:, 1], color='r', label='Q1_PSD')
# axs[3].plot(Q4_PSD[:, 0]*f_SIM, Q4_PSD[:, 1], color='g', label='Q1_PSD')
# axs[3].set_xlabel("Freq (GHz)", color="black", fontsize=10)
# axs[3].set_ylabel("PSD (Hz)", color="blue", fontsize=10)
# axs[3].set_yscale('log')
# axs[3].set_xlim([50, 600])
# axs[3].set_ylim([10, 10000])
#
# plt.grid()
# plt.show()

"""
Polished
"""

# pgSFQQ1 = []
# l_i = 1
# for i in range(len(pgSFQ)):
#     pgSFQQ1.append(pgSFQ[i]*eQ1[i])
#
# pgSFQQ1_scaled = []
# p2QP = 8e-3 # photon to QP conversion rate
# base = 1000
# for i in range(len(pgSFQ)):
#     pgSFQQ1_scaled.append(pgSFQQ1[i]*eQ1[i]*p2QP+base)
#
# fig, axs = plt.subplots(2)
# axs_02 = axs[0].twinx()
#
# axs_02.plot(f_SFQ[l_i:], eSFQ[l_i:], color="red", marker="o", label='Radiator Efficiency')
# axs_02.plot(f_Q1[l_i:], eQ1[l_i:], color="yellow", marker="o", label='Receiver Efficiency')
# axs_02.set_ylabel('Coupling Efficiency', color="black", fontsize=10)
# axs_02.set_yscale('log')
# axs_02.set_ylim([1e-4, 1e-1])
# axs_02.legend(loc=1)
#
# axs[0].plot(f_Q1[l_i:], pgSFQQ1[l_i:], color="orange", marker="o", label='Photon Rate')
# axs[0].set_ylabel("Photons/Sec", color="black", fontsize=10)
# axs[0].set_xlim([50, 700])
# axs[0].set_ylim([1e5, 1e9])
# axs[0].set_yscale('log')
# axs[0].grid(True, which="both")
# axs[0].legend(loc=4)
# axs[0].set_xlabel("Antenna Frequency (GHz)", color="black", fontsize=10)
#
# axs_12 = axs[1].twinx()
# axs_12.plot(f_Q1[l_i:], pgSFQQ1_scaled[l_i:], color="orange", linestyle='--', label='Photon Rate Scaled')
# axs_12.set_ylabel("Scaled Photons Rate (Hz)", color="black", fontsize=10)
# axs_12.set_xlim([50, 700])
# axs_12.set_ylim([500, 10000])
# axs_12.set_yscale('log')
# axs_12.legend(loc=1)
#
# axs[1].plot(Q1_PSD[:, 0]*f_SIM, Q1_PSD[:, 1], color='k', label='Q1 Measurement 200fF')
# axs[1].set_xlabel("Radiator Josephson Frequency (GHz)", color="black", fontsize=10)
# axs[1].set_ylabel("Parity Rate (Hz)", color="black", fontsize=10)
# axs[1].set_yscale('log')
# axs[1].set_xlim([50, 700])
# axs[1].set_ylim([500, 10000])
# axs[1].grid(True, which="both")
# axs[1].legend(loc=4)
#
# plt.show()


"""
Calculate the noise bandwidth starts
"""
# Tbb1 = 400e-3
# Tbb2 = 463e-3
# Tbb4 = 485e-3
# PRQ1 = getPhotonRate(eQ1, f_SFQ, Tbb1)
# PRQ2 = getPhotonRate(eQ2, f_SFQ, Tbb2)
# PRQ4 = getPhotonRate(eQ4, f_SFQ, Tbb4)
# print('PRQ1=', PRQ1)
# print('PRQ2=', PRQ2)
# print('PRQ4=', PRQ4)


# DfQ1 = getNoiseBandwidth(eQ1, f_SFQ)
# DfQ2 = getNoiseBandwidth(eQ2, f_SFQ)
# DfQ4 = getNoiseBandwidth(eQ4, f_SFQ)
# print('DfQ1=', DfQ1/1e9)
# print('DfQ2=', DfQ2/1e9)
# print('DfQ4=', DfQ4/1e9)

# TQ1 = getTbb(3.21e9, 1000, 130e9)
# TQ2 = getTbb(1.21e9, 12, 329e9)
# TQ4 = getTbb(3.21e9, 190, 213e9)
# print('TQ1=', TQ1)
# print('TQ2=', TQ2)
# print('TQ4=', TQ4)
"""
Calculate the noise bandwidth ends
"""

"""Polished 2022Jan15"""

### Calculating the photons received

# pgSFQQ1 = []
# pgSFQQ2 = []
# pgSFQQ4 = []
# for i in range(len(pgSFQ)):
#     pgSFQQ1.append(pgSFQ[i]*eQ1[i])
#     pgSFQQ2.append(pgSFQ[i]*eQ2[i])
#     pgSFQQ4.append(pgSFQ[i]*eQ4[i])

Gamma_re_Q1 = []
Gamma_re_Q2 = []
Gamma_re_Q4 = []
Gamma_re_withBase_Q1 = []
Gamma_re_withBase_Q2 = []
Gamma_re_withBase_Q4 = []
ratioQ1 = 1.0/18
ratioQ2 = 1.0/10
ratioQ4 = 1.0/8
base_Q1 = 1030.0
base_Q2 = 12.8
base_Q4 = 190.0
for i in range(len(AreaQ1)):
    gamma_re_Q1 = 0.5*PhotonFlux[i]*AreaQ1[i]*eQ1[i]
    Gamma_re_Q1.append(gamma_re_Q1)
    Gamma_re_withBase_Q1.append(gamma_re_Q1*ratioQ1 + base_Q1)

    gamma_re_Q2 = 0.5*PhotonFlux[i]*AreaQ2[i]*eQ2[i]
    Gamma_re_Q2.append(gamma_re_Q2)
    Gamma_re_withBase_Q2.append(gamma_re_Q2*ratioQ2 + base_Q2)

    gamma_re_Q4 = 0.5*PhotonFlux[i]*AreaQ4[i]*eQ4[i]
    Gamma_re_Q4.append(gamma_re_Q4)
    Gamma_re_withBase_Q4.append(gamma_re_Q4*ratioQ4 + base_Q4)

fig, axs = plt.subplots(2)

axs[0].plot(f_SFQ, eQ1, color="blue", marker="o", label='Q1')
axs[0].plot(f_SFQ, eQ2, color="red", marker="o", label='Q2')
axs[0].plot(f_SFQ, eQ4, color="green", marker="o", label='Q4')
axs[0].plot(f_SFQ, eSFQ, color="black", marker="o", label='SFQ')
# axs[0].plot(f_SFQ, eSFQ*eQ1, color="blue", marker="d", label='Q1 Total')
# axs[0].plot(f_SFQ, eSFQ*eQ2, color="red", marker="d", label='Q2 Total')
# axs[0].plot(f_SFQ, eSFQ*eQ4, color="green", marker="d", label='Q4 Total')
# axs[0].plot(f_SFQ, pgSFQQ1, color="blue", marker="o", label='Q1_SFQ')
# axs[0].plot(f_SFQ, pgSFQQ2, color="red", marker="o", label='Q2_SFQ')
# axs[0].plot(f_SFQ, pgSFQQ4, color="green", marker="o", label='Q4_SFQ')
axs[0].set_ylabel("Photon Generation Rate ($s^{-1}$)", color="black", fontsize=10)
axs[0].set_xlim([50, 500])
axs[0].set_ylim([1e-4, 2e-1])
axs[0].set_yscale('log')
axs[0].grid()
axs[0].legend(loc=3)
# axs[0].set_ylim([-60, -20])

Q1_PSD_pure = copy.deepcopy(Q1_PSD)
Q2_PSD_pure = copy.deepcopy(Q2_PSD)
Q4_PSD_pure = copy.deepcopy(Q4_PSD)
e_Q41 = 0.18 # from Q1 to Q4,  e_Q41<=0.18
e_Q21 = 0.012 # from Q1 to Q2, e_Q21<=0.012
e_Q24 = 0.032 # from Q4 to Q2, e_Q24<=
Q4_PSD_pure[:, 1] = Q4_PSD_pure[:, 1] - e_Q41*Q1_PSD[:, 1]
Q2_PSD_pure[:, 1] = Q2_PSD_pure[:, 1] - e_Q21*Q1_PSD[:, 1]-e_Q24*Q4_PSD[:, 1]

axs[1].plot(Q1_PSD[:, 0]*f_SIM, Q1_PSD[:, 1], 'b', label='Q1')
# axs[1].plot(f_SFQ, Gamma_re_withBase_Q1, 'b--', label='Q1 Total')
axs[1].plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD[:, 1], 'r', label='Q2')
# axs[1].plot(f_SFQ, Gamma_re_withBase_Q2, 'r--', label='Q2 Total')
axs[1].plot(Q4_PSD[:, 0]*f_SIM, Q4_PSD[:, 1], 'g', label='Q4')
# axs[1].plot(f_SFQ, Gamma_re_withBase_Q4, 'g--', label='Q4 Total')
# axs[1].plot(Q1_PSD[:, 0]*f_SIM, Q1_PSD_pure[:, 1], 'b--', label='Q1_pure')
# axs[1].plot(Q2_PSD[:, 0]*f_SIM, Q2_PSD_pure[:, 1], 'r--', label='Q2_pure')
# axs[1].plot(Q4_PSD[:, 0]*f_SIM, Q4_PSD_pure[:, 1], 'g--', label='Q4_pure')

axs[1].set_xlabel("Freq (GHz)", color="black", fontsize=10)
axs[1].set_ylabel("PSD (Hz)", color="blue", fontsize=10)
axs[1].set_yscale('log')
axs[1].set_xlim([50, 700])
axs[1].set_ylim([10, 10000])
# axs[1].set_ylim([800, 8000]) # Q1
# axs[1].set_ylim([10, 1000]) # Q2
# axs[1].set_ylim([100, 5000]) # Q4
axs[1].grid(True, which="both")
axs[1].legend(loc=4)

# axs[2].errorbar(Q1_P1[:, 0]*f_SIM, Q1_P1[:, 1], yerr=Q1_P1[:, 2]/np.sqrt(50), color='b', label='Q1')
# axs[2].errorbar(Q2_P1[:, 0]*f_SIM, Q2_P1[:, 1], yerr=Q2_P1[:, 2]/np.sqrt(50), color='r', label='Q2')
# axs[2].errorbar(Q4_P1[:, 0]*f_SIM, Q4_P1[:, 1], yerr=Q4_P1[:, 2]/np.sqrt(50), color='g', label='Q4')
#
# axs[2].set_xlabel("Radiator Josephson Frequency (GHz)", color="black",
#                   fontsize=10)
# axs[2].set_ylabel("P1", color="black", fontsize=10)
# axs[2].set_yscale('log')
# axs[2].set_xlim([50, 500])
# axs[2].grid(True, which="both")
# axs[2].legend(loc=4)

plt.grid()
plt.show()