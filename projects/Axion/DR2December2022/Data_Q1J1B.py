from datetime import datetime
from scipy import signal
from dataChest import *
import os
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import matplotlib
matplotlib.use('TkAgg')

# Z:\mcdermott-group\data\Axion\2022-09-22 - DR2\DCH\Axion3A\09-29-22\PSD_Q1_J1B_Retightened
biases_data = [-0.0636999999999999, -0.057819999999999885, -0.08133999999999991, -0.03821999999999987, -0.08917999999999991, -0.032339999999999994, -0.0343, -0.044099999999999875, 0.04018000000000007, 0.06762000000000008, -0.010779999999999975, -0.05585999999999988, -0.03626, -0.0715399999999999, 0.03626000000000006, 0.0852600000000001, -0.06957999999999989, 0.04410000000000007, -0.0734999999999999, 0.0009800000000000349, -0.053899999999999886, 0.004900000000000038, -0.03625999999999987, -0.02645999999999999, 0.09114000000000011, 0.0970200000000001, 0.0754600000000001, 0.07350000000000009, 0.024500000000000056, -0.01665999999999998, -0.0656599999999999, 0.09506000000000012, 0.04606000000000007, 0.038220000000000066, -0.012739999999999977, -0.09505999999999992, -0.08329999999999992, -0.08721999999999991, 0.06958000000000009, 0.04998000000000008, 0.00686000000000004, -0.0009799999999999668, 0.05978000000000008, 0.07938000000000009, 0.08134000000000009, -0.06173999999999989, 0.01862000000000005, -0.0852599999999999, -0.0754599999999999, -0.014699999999999979, -0.04605999999999988, 0.022540000000000053, 0.026460000000000056, 0.008820000000000041, 0.03430000000000007, -0.030379999999999994, -0.0774199999999999, -0.024499999999999987, 0.05390000000000008, -0.02841999999999999, -0.05193999999999988, -0.09701999999999993, -0.006859999999999972, -0.0029399999999999687, -0.020579999999999984, -0.04213999999999987, 0.06174000000000008, -0.09309999999999992, 0.012740000000000045, 0.051940000000000076, 0.04214000000000007, 0.05586000000000008, 0.0891800000000001, 0.09310000000000011, 0.05782000000000009, -0.022539999999999987, -0.048019999999999875, 0.07154000000000009, -0.09113999999999992, 0.06370000000000008, -0.0676199999999999, 0.0774200000000001, -0.05977999999999989, -0.008819999999999974, 0.03038000000000006, 0.06566000000000008, 0.01666000000000005, 0.03234000000000006, -0.04997999999999988, -0.04017999999999987, 0.0833000000000001, -0.00489999999999997, -0.018619999999999984, 0.02842000000000006, 0.020580000000000053, -0.07937999999999991, 0.048020000000000077, 0.0872200000000001, 0.014700000000000046, 0.010780000000000043, 0.0029400000000000368]
parity_rate_data = [3471.495589344274, 3331.0099988429984, 4543.265661402578, 3142.58652470637, 4991.9676176442035, 5797.744965137803, 5203.388319140517, 2575.071529502203, 2475.452097191254, 3897.977124981755, 2436.6731371374576, 3362.378761273207, 4882.655736685086, 3653.4134957716833, 2681.9723639861677, 5487.618666370276, 3570.4992471968544, 2851.758803379294, 3756.188967655175, 2276.172000989097, 3503.9490903322067, 2326.4343231429216, 3548.96930553218, 4986.189037413956, 5516.440522762494, 25.971496748567617, 4863.41032542128, 4608.581918208841, 4611.594464399428, 4003.702403232345, 3501.332157938536, 5694.126350723845, 3197.763440122297, 2562.0805109675107, 4787.572723416572, 5306.4618861311865, 4658.130320665954, 4863.7429622875625, 4616.609375368158, 4220.134464090518, 2843.8128697837205, 2386.37679202877, 4230.848705615003, 5011.2714860000715, 5160.472422172733, 3467.5990530945155, 3450.793884122359, 4601.466372499672, 4060.9840297192695, 4931.4583850035915, 2676.5654560427806, 4905.580149587304, 52.902901752855804, 4713.398876121296, 2712.427995662757, 202.94531937834483, 4248.423706718596, 9996.428645469408, 4154.779697177391, 5519.271912798225, 3499.2893840455854, 5436.8624325913115, 2257.974189952085, 2440.3359211757534, 4371.104635006121, 3911.113877530032, 4232.702832406127, 5097.095240571997, 3626.366886153216, 4126.544836850447, 2634.137255993271, 3458.8185407957094, 5619.554038302975, 5714.001610277832, 3636.8134742345105, 3899.0323133760685, 2855.6074187079416, 4776.152464939229, 5008.129938968447, 4374.744124723315, 3521.155328433244, 5036.583016478782, 3393.0707765949246, 2423.566385429558, 3324.3011851710507, 4487.776951314827, 3985.631855130823, 2914.3424018554683, 3262.4698279525637, 4101.791788276078, 5201.458865545152, 2286.092866640984, 3930.7947472201913, 4863.881421697916, 3026.5851747461215, 4436.180645305941, 4078.5098079013565, 5265.621752239113, 4724.292307039262, 6795.855722308001, 2238.3711481602104]

biases=[]
parity_rate=[]
for i in range(len(parity_rate_data)):
    if parity_rate_data[i] <= 9000 and parity_rate_data[i] > 800:
        biases.append(biases_data[i])
        parity_rate.append(parity_rate_data[i])

plt.title('Parity Rate vs Radiator Bias')
# plt.plot(4*times, np.abs(I + Q * 1j))
plt.semilogy([np.abs(b+0.0025)*2*484*10 for b in biases], parity_rate,marker='o',markersize=6,linestyle='None',color='r')

plt.grid(which='both')
plt.ylim(0.8e3,9e3)
#plt.xlim(-600,600)
# plt.xlabel('Radiator Bias (mV)')
plt.xlabel('Radiator Bias (mV)')
plt.ylabel('Parity Rate (Hz)')
plt.pause(0.1)

