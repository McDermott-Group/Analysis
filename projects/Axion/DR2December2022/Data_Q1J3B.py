from datetime import datetime
from scipy import signal
from dataChest import *
import os
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import matplotlib
matplotlib.use('TkAgg')

# Z:\mcdermott-group\data\Axion\2022-09-22 - DR2\DCH\Axion3A\09-29-22\PSD_Q1_J1B_Retightened
biases_data =[-0.05585999999999994, 0.01666, 0.03822000000000014, -0.028909999999999998, 0.019600000000000003, 0.03675, -0.040179999999999924, 0.06566000000000016, -0.028419999999999997, -0.06761999999999994, -0.056839999999999995, -0.027929999999999996, -0.05389999999999999, -0.07153999999999995, -0.036259999999999924, 0.03969, -0.05193999999999994, -0.059779999999999944, 0.07350000000000018, -0.004899999999999896, -0.04409999999999993, 0.04263, 0.04214000000000014, 0.017640000000000003, -0.07545999999999996, -0.05978, 0.01862, -0.016659999999999904, -0.026949999999999995, -0.027439999999999996, 0.026460000000000133, -0.028419999999999918, 0.019110000000000002, -0.000979999999999892, 0.034300000000000136, 0.04606000000000015, 0.04998000000000015, -0.024499999999999914, 0.020090000000000004, 0.03822, -0.025479999999999996, 0.017150000000000002, 0.057820000000000156, 0.04116, -0.08329999999999996, 0.030380000000000136, -0.055369999999999996, -0.08721999999999996, 0.010780000000000118, 0.07742000000000017, 0.06174000000000016, 0.006860000000000115, -0.06369999999999995, 0.020580000000000005, 0.0029400000000001114, 0.018130000000000004, -0.012739999999999902, -0.04801999999999993, 0.014700000000000121, -0.03233999999999992, 0.02254000000000013, 0.03528, -0.026459999999999997, 0.08134000000000018, -0.020579999999999907, -0.008819999999999899, 0.018620000000000126, 0.06958000000000017, -0.07937999999999996, -0.058309999999999994, 0.053900000000000156, -0.025969999999999997, -0.0294, -0.05242999999999999]
parity_rate_data = [3731.974439071507, 2188.4797252299686, 3627.3342567252025, 3813.7991589629983, 2049.6911242177293, 3361.108628633695, 2075.849192311959, 4667.6021166189685, 1979.2523428012387, 2788.1688496381566, 3603.5099519302667, 2038.1382207630652, 2815.997236345304, 3082.19029323752, 2210.299235460647, 3299.538401760186, 2372.282287369278, 3092.8992582445835, 148.21168441706973, 2592.1338202870643, 2104.2536540134715, 2853.753984628192, 3062.9358195075615, 2252.2105455150563, 3313.369051384251, 3098.7019799502195, 2213.848627910821, 2739.0920461623164, 2035.0133318538055, 4094.1504532942845, 2049.5421144483616, 1921.9553451483046, 2052.2777991190283, 2691.06561706247, 2533.2616602209428, 2910.969720059808, 3059.069814675651, 1950.6571889822003, 2064.160437266663, 3530.37621622267, 1977.7288748406722, 2214.5624482111125, 3586.5532354290995, 3030.8583576864257, 4294.041799824679, 2256.8640606856875, 3218.1398901256166, 4800.959353529697, 2662.918771335327, 36.76683276174591, 4238.1161181162015, 2659.880058869186, 2863.2577061421666, 2082.8998557203417, 2553.05675145731, 2203.18139329455, 2535.815852799645, 2113.1297472975, 2073.710830692794, 2023.7485868053354, 1979.59684929799, 2953.5131886614586, 1958.2784893505682, 35.032486428743375, 2601.996992551806, 2525.6195243656584, 2148.2940529688613, 28.63740092724047, 3932.7952486481936, 3349.7344850893874, 3255.3868139549436, 1977.258780192821, 2754.1538809464196, 2381.8849792009005]

biases=[]
parity_rate=[]
for i in range(len(parity_rate_data)):
    if parity_rate_data[i] <= 9000 and parity_rate_data[i] > 800:
        biases.append(biases_data[i])
        parity_rate.append(parity_rate_data[i])

plt.title('Parity Rate vs Radiator Bias')
# plt.plot(4*times, np.abs(I + Q * 1j))
plt.semilogy([np.abs(b+0.01)*2*484*10 for b in biases], parity_rate,marker='o',markersize=6,linestyle='None',color='r')#np.abs(b+0.01)

plt.grid(which='both')
plt.ylim(0.8e3,9e3)
#plt.xlim(-600,600)
# plt.xlabel('Radiator Bias (mV)')
plt.xlabel('Radiator Frequency (GHz)')
plt.ylabel('Parity Rate (Hz)')
plt.pause(0.1)

