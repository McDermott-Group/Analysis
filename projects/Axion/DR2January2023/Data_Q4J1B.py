from datetime import datetime
from scipy import signal
from dataChest import *
import os
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import matplotlib
matplotlib.use('TkAgg')

# Z:\mcdermott-group\data\Axion\2023-01-23 - DR2\DCH\Axion4A\01-29-23\PSD_Q4_J1B
biases_data = [-0.02890999999999997, -0.0024500000000000294, -0.027439999999999968, -0.013719999999999958, -0.03919999999999998, -0.05144999999999999, -0.0044099999999999496, -0.043119999999999985, -0.05095999999999999, 0.013720000000000003, -0.011759999999999956, -0.0019599999999999475, -0.007349999999999952, -0.029889999999999972, -0.0048999999999999495, 0.046549999999999946, 0.004410000000000058, -0.057819999999999996, 0.009800000000000062, 0.021560000000000013, 0.004900000000000059, -0.031849999999999976, 0.025480000000000017, -0.0014699999999999468, -0.04017999999999998, 0.027930000000000017, -0.022049999999999965, 0.026950000000000016, 0.023520000000000013, -0.0009799999999999464, -0.02939999999999997, -0.039200000000000006, -0.02841999999999997, -0.0588, -0.02596999999999997, 0.024990000000000016, 0.008820000000000062, -0.056839999999999995, -0.024009999999999965, 0.03674999999999995, 0.007349999999999966, -0.05145, -0.04410000000000001, 0.022049999999999965, 0.0004900000000000548, -0.007350000000000027, 0.026949999999999957, 0.0073500000000000605, -0.01616999999999996, -0.010289999999999954, 0.009310000000000063, 0.02891000000000002, -0.015189999999999959, 0.012249999999999957, -0.0034299999999999487, -0.04262999999999998, 0.008330000000000061, 0.003920000000000058, -0.026950000000000016, -0.03968999999999998, -0.05389999999999999, -0.04605999999999998, -0.04360999999999998, -0.045569999999999986, -0.024499999999999966, -0.0029399999999999483, -0.05635, -0.03380999999999997, -0.05046999999999999, 0.027440000000000016, -0.012250000000000025, -0.041650000000000006, 0.010290000000000063, -0.002449999999999948, -0.030379999999999973, 0.01127, -0.056350000000000004, -0.008329999999999952, -0.017150000000000023, -0.02792999999999997, 0.023030000000000012, -0.013229999999999957, -0.01714999999999996, -0.00587999999999995, 0.026460000000000015, -0.01763999999999996, -0.034299999999999976, -0.05585999999999999, -0.0588, -0.033319999999999975, -0.018129999999999962, 0.011760000000000001, -0.052919999999999995, -0.03870999999999998, -0.03282999999999998, 0.024500000000000015, -0.000489999999999946, 0.03184999999999995, -0.025479999999999968, -0.021069999999999964, 0.00784000000000006, -0.009799999999999955, -0.03430000000000001, -0.059289999999999995, -0.047039999999999985, 0.016660000000000008]
parity_rate_data = [2159.5060779702776, 1977.6134055850764, 2272.9726167266203, 2044.556810508427, 2557.609835443423, 2305.7743215707073, 1914.8788540122173, 1952.6774950912034, 2102.50807546586, 2373.084326937677, 2158.80751839945, 2060.749476982621, 2109.2527447387715, 2364.7582016698534, 2017.6619111056352, 2329.087614098015, 2523.4506462854233, 2547.875186795687, 2284.9917352732327, 2709.969259900649, 2724.0268198046756, 2343.6984026268733, 2021.0235357174097, 2008.0195095308338, 2415.4874042725037, 2108.7046698880813, 2610.065783999128, 2067.1347882517202, 2204.516137393773, 2001.9720224293158, 2255.748999783601, 2666.84183762097, 2307.818281715903, 2292.95812965995, 2401.8077123059707, 2182.425342430653, 2443.5342898974623, 2606.8836911053445, 2442.1033281560635, 2153.070967323074, 2358.663464215879, 2186.787862570146, 2229.7802992802176, 2406.9830705002096, 2109.111314431542, 1900.451126217366, 2141.894720571741, 2448.484940123043, 1847.6798813512576, 2067.236085740586, 2599.9115345793, 2223.785270036749, 2192.2140238668776, 2193.6617806191193, 2013.158115954039, 2278.5856233332106, 2257.8492127760214, 2723.6393341994417, 2655.7129467442674, 2523.361595131536, 2333.545500340042, 2176.450094847866, 2266.255571303556, 2093.540190276512, 2571.571190547087, 2024.8601502034805, 2280.1688137774977, 2860.853753917972, 2136.4706619679273, 2092.1205896152774, 2033.8946274960372, 2368.2022619479835, 2678.7022581391484, 2063.880126283068, 2246.6611698139236, 2139.021395351129, 2400.900493832175, 2096.1910214880468, 2073.9888226572725, 2507.0720298767296, 2778.68455831436, 1986.3166135509498, 2148.407040698173, 2081.0970125280473, 2677.76426548587, 2105.5298301309545, 3072.6899566278116, 2308.74829490156, 2520.374407380485, 2584.788547424875, 2149.6020030523387, 2305.398092022597, 2248.0120609416417, 2816.184746943416, 2420.1489546421813, 2387.8351754428713, 2126.367795762563, 2125.552416550891, 2373.2845666148146, 2851.500071390327, 2410.140503922937, 1905.772600014803, 2989.93269844132, 2569.9767301237935, 2181.721190591173, 3202.0222606189864]

biases=[]
parity_rate=[]
for i in range(len(parity_rate_data)):
    if parity_rate_data[i] <= 9000 and parity_rate_data[i] > 800:
        biases.append(biases_data[i])
        parity_rate.append(parity_rate_data[i])

plt.title('Parity Rate vs Radiator Bias')
# plt.plot(4*times, np.abs(I + Q * 1j))
plt.semilogy([b/0.49 for b in biases], parity_rate,marker='o',markersize=6,linestyle='None',color='r')

plt.grid(which='both')
#plt.ylim(0.8e3,9e3)
#plt.xlim(-600,600)
# plt.xlabel('Radiator Bias (mV)')
plt.xlabel('Radiator Bias (GHz)')
plt.ylabel('Parity Rate (Hz)')
plt.pause(0.1)

